/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hbys.gui.forms;

import hbys.database.DatabaseConnection;
import hbys.gui.backend.ManageAppointmentsPage;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class PatientPage extends javax.swing.JFrame {

    private static int patientID; // Giriş yapan hastanın ID'si
    private static int userID;
    private static String patientName;

    /**
     * Creates new form PatientPage
     *
     * @param patientID
     * @param userID
     */
    public PatientPage(int patientID, int userID) {
        this.patientID = patientID;
        this.userID = userID;
        initComponents();
        customizePage();
    }

    private void customizePage() {
        try ( Connection conn = DatabaseConnection.getConnection()) {
            if (conn != null) {
                System.out.println("Database connection successful.");
            } else {
                System.out.println("Database connection failed.");
                return;
            }

            String query = "SELECT FirstName, LastName, Email FROM Users WHERE UserID = ?";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, userID);

            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String fullName = rs.getString("FirstName") + " " + rs.getString("LastName");
                String email = rs.getString("Email");

                jLabel_Welcome.setText("Welcome, " + fullName + "!");
                jLabel_Email.setText("Email: " + email);
            } else {
                System.out.println("No user found for UserID: " + userID);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading user details.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton_PatientAppointments = new javax.swing.JButton();
        jButton_PatientPrescriptions = new javax.swing.JButton();
        jButton_PatientLabResults = new javax.swing.JButton();
        jButton_PatientProfile = new javax.swing.JButton();
        jButton_LogOut = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jLabel_Welcome = new javax.swing.JLabel();
        jLabel_Email = new javax.swing.JLabel();
        jButton_ManageAppointments = new javax.swing.JButton();
        jButton_ShowInvoiceAndBills = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton_PatientAppointments.setText("My Appointments");
        jButton_PatientAppointments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_PatientAppointmentsActionPerformed(evt);
            }
        });

        jButton_PatientPrescriptions.setText("My Prescriptions");
        jButton_PatientPrescriptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_PatientPrescriptionsActionPerformed(evt);
            }
        });

        jButton_PatientLabResults.setText("My Lab Results");
        jButton_PatientLabResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_PatientLabResultsActionPerformed(evt);
            }
        });

        jButton_PatientProfile.setText("Profile");
        jButton_PatientProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_PatientProfileActionPerformed(evt);
            }
        });

        jButton_LogOut.setText("Log Out");
        jButton_LogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_LogOutActionPerformed(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable);

        jScrollPane1.setViewportView(jScrollPane2);

        jButton_ManageAppointments.setText("Manage Appointments");
        jButton_ManageAppointments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ManageAppointmentsActionPerformed(evt);
            }
        });

        jButton_ShowInvoiceAndBills.setText("Bills / Invoices");
        jButton_ShowInvoiceAndBills.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ShowInvoiceAndBillsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton_PatientAppointments, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_PatientLabResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_PatientPrescriptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_PatientProfile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_ManageAppointments, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton_ShowInvoiceAndBills, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_Welcome, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_Email, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_LogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton_PatientAppointments, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_PatientLabResults, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_PatientPrescriptions, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_PatientProfile, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel_Email, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(jLabel_Welcome, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(jButton_LogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_ManageAppointments, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_ShowInvoiceAndBills, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_PatientAppointmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_PatientAppointmentsActionPerformed
        loadAppointments();
    }//GEN-LAST:event_jButton_PatientAppointmentsActionPerformed

    private void jButton_LogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_LogOutActionPerformed
        new LoginPage().setVisible(true); // Login ekranına dön
        this.dispose(); // PatientPage ekranını kapat
    }//GEN-LAST:event_jButton_LogOutActionPerformed

    private void jButton_PatientLabResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_PatientLabResultsActionPerformed
        // TODO add your handling code here:
        loadLabResults();
    }//GEN-LAST:event_jButton_PatientLabResultsActionPerformed

    private void jButton_PatientPrescriptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_PatientPrescriptionsActionPerformed
        // TODO add your handling code here:
        loadPrescriptions();
    }//GEN-LAST:event_jButton_PatientPrescriptionsActionPerformed

    private void jButton_PatientProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_PatientProfileActionPerformed
        System.out.println("Opening Patient Profile for Patient ID: " + patientID); // Debugging
        new PatientProfile(userID, patientName).setVisible(true); // Pass the patient ID and name to the profile
    }//GEN-LAST:event_jButton_PatientProfileActionPerformed

    private void jButton_ManageAppointmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ManageAppointmentsActionPerformed
        new ManageAppointmentsPage(patientID).setVisible(true);
    }//GEN-LAST:event_jButton_ManageAppointmentsActionPerformed

    private void jButton_ShowInvoiceAndBillsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ShowInvoiceAndBillsActionPerformed
        System.out.println("Showing invoices and bills for Patient ID: " + patientID);

        try ( Connection conn = DatabaseConnection.getConnection()) {
            if (conn == null) {
                System.out.println("Database connection failed.");
                JOptionPane.showMessageDialog(this, "Database connection failed.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Billing ve Documents tablosundaki verileri al
            String query = "SELECT "
                    + "b.BillID AS BillID, "
                    + "b.AppointmentID AS AppointmentID, "
                    + "b.TotalAmount AS TotalAmount, "
                    + "b.PaymentStatus AS PaymentStatus, "
                    + "b.IssueDate AS IssueDate, "
                    + "d.DocumentID AS DocumentID, "
                    + "d.DocumentType AS DocumentType, "
                    + "d.Description AS Description, "
                    + "d.Status AS DocumentStatus "
                    + "FROM Billing b "
                    + "LEFT JOIN Documents d ON d.RelatedID = b.AppointmentID OR d.RelatedID = b.BillID "
                    + "WHERE d.CreatedFor = ? OR b.AppointmentID IN (SELECT AppointmentID FROM Appointments WHERE PatientID = ?)";

            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, patientID); // Belgeyi hasta için oluşturmuş
            ps.setInt(2, patientID); // Hasta ID'si ile ilişkilendirilmiş faturalar

            ResultSet rs = ps.executeQuery();

            // JTable için model oluştur
            String[] columnNames = {
                "Bill ID", "Appointment ID", "Total Amount", "Payment Status", "Issue Date",
                "Document ID", "Document Type", "Description", "Document Status"
            };
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);

            // Gelen verileri JTable'a ekle
            int rowCount = 0;
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("BillID"),
                    rs.getInt("AppointmentID") == 0 ? "N/A" : rs.getInt("AppointmentID"), // Eğer NULL ise "N/A"
                    rs.getDouble("TotalAmount"),
                    rs.getString("PaymentStatus"),
                    rs.getTimestamp("IssueDate"),
                    rs.getInt("DocumentID"),
                    rs.getString("DocumentType"),
                    rs.getString("Description"),
                    rs.getString("DocumentStatus")
                };
                model.addRow(row);
                rowCount++;
            }

            // JTable'a model ata
            jTable.setModel(model);

            if (rowCount == 0) {
                System.out.println("No invoices or bills found for patient ID: " + patientID);
            }

            jTable.revalidate();
            jTable.repaint();
            System.out.println("JTable updated successfully with invoices and bills.");

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading invoices and bills.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton_ShowInvoiceAndBillsActionPerformed
    private void loadPrescriptions() {
        System.out.println("loadPrescriptions() called. Patient ID: " + patientID);

        try ( Connection conn = DatabaseConnection.getConnection()) {
            if (conn != null) {
                System.out.println("Database connection successful.");
            } else {
                System.out.println("Database connection failed.");
                return;
            }

            String query = "SELECT "
                    + "p.PrescriptionID, "
                    + "CONCAT(u.FirstName, ' ', u.LastName) AS DoctorName, "
                    + "p.DateIssued, "
                    + "pi.Quantity, "
                    + "i.ItemName, "
                    + "i.PricePerUnit, "
                    + "(pi.Quantity * i.PricePerUnit) AS TotalPrice, " // Toplam fiyat hesaplaması
                    + "p.Notes "
                    + "FROM Prescriptions p "
                    + "JOIN PrescriptionItems pi ON p.PrescriptionID = pi.PrescriptionID "
                    + "JOIN Doctors d ON p.DoctorID = d.DoctorID "
                    + "JOIN Users u ON d.UserID = u.UserID "
                    + "JOIN PharmacyInventory i ON pi.ItemID = i.ItemID "
                    + "WHERE p.PatientID = ?";
            System.out.println("SQL Query: " + query);

            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, patientID);
            System.out.println("Patient ID: " + patientID);

            ResultSet rs = ps.executeQuery();
            System.out.println("Query executed. Processing result set...");

            // Tablo için sütun başlıkları
            String[] columnNames = {"Prescription ID", "Doctor Name Surname", "Date Issued", "Item Name", "Quantity", "Price Per Unit", "Total Price", "Notes"};
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);

            int rowCount = 0;
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("PrescriptionID"),
                    rs.getString("DoctorName"),
                    rs.getTimestamp("DateIssued"),
                    rs.getString("ItemName"),
                    rs.getInt("Quantity"),
                    rs.getDouble("PricePerUnit"),
                    rs.getDouble("TotalPrice"), // Toplam fiyat sütunu
                    rs.getString("Notes")
                };
                model.addRow(row);
                rowCount++;
            }

            jTable.setModel(model);

            System.out.println("Number of rows added to JTable: " + rowCount);

            if (rowCount == 0) {
                System.out.println("No prescriptions found for patient ID: " + patientID);
            }

            jTable.revalidate();
            jTable.repaint();
            System.out.println("JTable updated successfully.");
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error loading prescriptions.");
        }
    }

    private void loadAppointments() {
        System.out.println("loadAppointments() called. Patient ID: " + patientID);

        try ( Connection conn = DatabaseConnection.getConnection()) {
            if (conn != null) {
                System.out.println("Database connection successful."); // Veritabanı bağlantısı başarılı
            } else {
                System.out.println("Database connection failed."); // Veritabanı bağlantısı başarısız
                return;
            }

            String query = "SELECT "
                    + "a.AppointmentID, "
                    + "CONCAT(u.FirstName, ' ', u.LastName) AS DoctorName, "
                    + "a.AppointmentDate, "
                    + "a.Status, "
                    + "a.Notes "
                    + "FROM Appointments a "
                    + "JOIN Doctors d ON a.DoctorID = d.DoctorID "
                    + "JOIN Users u ON d.UserID = u.UserID "
                    + "WHERE a.PatientID = ?";
            System.out.println("SQL Query: " + query);

            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, patientID);
            System.out.println("Patient ID: " + patientID);

            ResultSet rs = ps.executeQuery();
            System.out.println("Query executed. Processing result set...");

            // JTable için model oluştur ve sütun başlıklarını tanımla
            String[] columnNames = {"Appointment ID", "Doctor Name and Surname", "Date of Appointment", "Status", "Doctor Notes"};
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);

            // Gelen verileri JTable'a ekle
            int rowCount = 0;
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("AppointmentID"),
                    rs.getString("DoctorName"),
                    rs.getTimestamp("AppointmentDate"),
                    rs.getString("Status"),
                    rs.getString("Notes")
                };
                model.addRow(row);
                rowCount++;
            }

            jTable.setModel(model);

            System.out.println("Number of rows added to JTable: " + rowCount);

            if (rowCount == 0) {
                System.out.println("No appointments found for patient ID: " + patientID);
            }

            jTable.revalidate();
            jTable.repaint();
            System.out.println("JTable updated successfully.");
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error loading appointments.");
        }
    }

    private void loadLabResults() {
        System.out.println("loadLabResults() called. Patient ID: " + patientID); // Debugging

        try ( Connection conn = DatabaseConnection.getConnection()) {
            if (conn != null) {
                System.out.println("Database connection successful."); // Veritabanı bağlantısı başarılı
            } else {
                System.out.println("Database connection failed."); // Veritabanı bağlantısı başarısız
                return;
            }

            String query = "SELECT "
                    + "l.TestID, "
                    + "CONCAT(t.FirstName, ' ', t.LastName) AS TechnicianName, "
                    + "l.TestName, "
                    + "l.TestDate, "
                    + "l.TestResult "
                    + "FROM LabTests l "
                    + "LEFT JOIN LabTechnicians t ON l.TechnicianID = t.TechnicianID "
                    + "WHERE l.PatientID = ?";
            System.out.println("SQL Query: " + query); // SQL sorgusunu kontrol et

            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, patientID); // Hasta ID'si atanıyor
            System.out.println("Patient ID: " + patientID); // Hasta ID'sini yazdır

            ResultSet rs = ps.executeQuery();
            System.out.println("Query executed. Processing result set..."); // Sorgu çalıştı

            // JTable için model oluştur ve sütun başlıklarını tanımla
            String[] columnNames = {"TEST ID", "Technician Name Surname", "Test Name", "Date of Test", "Result"};
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);

            // Gelen verileri JTable'a ekle
            int rowCount = 0; // Eklenen satırları saymak için
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("TestID"),
                    rs.getString("TechnicianName") != null ? rs.getString("TechnicianName") : "N/A", // Eğer teknisyen yoksa "N/A"
                    rs.getString("TestName"),
                    rs.getTimestamp("TestDate"),
                    rs.getString("TestResult")
                };
                model.addRow(row);
                rowCount++;
            }

            // JTable'a yeni modeli ata
            jTable.setModel(model);

            // Satır sayısını yazdır
            System.out.println("Number of rows added to JTable: " + rowCount);

            // Eğer satır yoksa uyarı ver
            if (rowCount == 0) {
                System.out.println("No lab results found for patient ID: " + patientID);
            }

            // JTable'ı yenile
            jTable.revalidate();
            jTable.repaint();
            System.out.println("JTable updated successfully."); // Tablo güncellendi
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error: " + e.getMessage()); // Hata mesajını yazdır
            JOptionPane.showMessageDialog(this, "Error loading lab results.");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientPage(patientID, userID).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_LogOut;
    private javax.swing.JButton jButton_ManageAppointments;
    private javax.swing.JButton jButton_PatientAppointments;
    private javax.swing.JButton jButton_PatientLabResults;
    private javax.swing.JButton jButton_PatientPrescriptions;
    private javax.swing.JButton jButton_PatientProfile;
    private javax.swing.JButton jButton_ShowInvoiceAndBills;
    private javax.swing.JLabel jLabel_Email;
    private javax.swing.JLabel jLabel_Welcome;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable;
    // End of variables declaration//GEN-END:variables
}
