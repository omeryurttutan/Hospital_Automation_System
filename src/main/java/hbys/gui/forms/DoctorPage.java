package hbys.gui.forms;

import hbys.database.DatabaseConnection;
import hbys.gui.UpdateLabTestPage;
import hbys.gui.backend.AddAdmissionPage;
import hbys.gui.backend.DeleteAppointmentPage;
import hbys.gui.backend.DeletePrescriptionPage;
import hbys.gui.backend.DischargePatientPage;
import hbys.gui.backend.RequestLabTestPage;
import hbys.gui.backend.RequestNewLabTestPage;
import hbys.gui.backend.SetAppointmentPage;
import hbys.gui.backend.UpdateAdmissionPage;
import hbys.gui.backend.UpdateAppointmentPage;
import hbys.gui.backend.UpdatePrescriptionPage;
import hbys.gui.backend.WritePrescriptionPage;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class DoctorPage extends javax.swing.JFrame {

    private static int doctorID;

    /**
     * Creates new form DoctorPage
     */
    public DoctorPage(int doctorID) {
        this.doctorID = doctorID;
        initComponents();
        customizePage();
    }

    private void customizePage() {
        try ( Connection conn = hbys.database.DatabaseConnection.getConnection()) {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Database connection failed.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Doktorun adını ve e-posta adresini al
            String query = "SELECT u.FirstName, u.LastName, u.Email "
                    + "FROM Doctors d "
                    + "JOIN Users u ON d.UserID = u.UserID "
                    + "WHERE d.DoctorID = ?";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, doctorID);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                String fullName = rs.getString("FirstName") + " " + rs.getString("LastName");
                String email = rs.getString("Email");

                // Doktor bilgilerini göstermek için uygun bileşenleri güncelleyin
                System.out.println("Doctor Name: " + fullName);
                System.out.println("Email: " + email);
            } else {
                System.out.println("No doctor found with ID: " + doctorID);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading doctor details.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane_PatientsPage = new javax.swing.JTabbedPane();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jButton_LoadPatientsq = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Patient = new javax.swing.JTable();
        jButton_SetAppointment = new javax.swing.JButton();
        jButton_WritePrescription = new javax.swing.JButton();
        jButton_RequestLabTest = new javax.swing.JButton();
        jTabbedPane_AppointmentsPage = new javax.swing.JTabbedPane();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_Appointments = new javax.swing.JTable();
        jButton_LoadAppointment = new javax.swing.JButton();
        jButton_DeleteAppointment = new javax.swing.JButton();
        jButton_UpdateAppointment = new javax.swing.JButton();
        jTabbedPane_PrescriptionsPage = new javax.swing.JTabbedPane();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_Prescriptions = new javax.swing.JTable();
        jButton_LoadPrescription = new javax.swing.JButton();
        jButton_DeletePrescription = new javax.swing.JButton();
        jButton_UpdatePrescription = new javax.swing.JButton();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jLayeredPane4 = new javax.swing.JLayeredPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable_Admissions = new javax.swing.JTable();
        jButton_DischargePatient = new javax.swing.JButton();
        jButton_LoadAdmissions = new javax.swing.JButton();
        jButton_AddAdmission = new javax.swing.JButton();
        jButton_UpdateAdmission1 = new javax.swing.JButton();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jLayeredPane5 = new javax.swing.JLayeredPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable_LabTests = new javax.swing.JTable();
        jButton_LoadLabTests = new javax.swing.JButton();
        jButton_RequestNewLabTest = new javax.swing.JButton();
        jButton_UpdateLabTest = new javax.swing.JButton();
        jButton_DeleteLabTest = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton_LoadPatientsq.setText("Load Patients");
        jButton_LoadPatientsq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_LoadPatientsqActionPerformed(evt);
            }
        });

        jTable_Patient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_Patient);

        jButton_SetAppointment.setText("Set an Appointment for Patient");
        jButton_SetAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SetAppointmentActionPerformed(evt);
            }
        });

        jButton_WritePrescription.setText("Write Prescription");
        jButton_WritePrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_WritePrescriptionActionPerformed(evt);
            }
        });

        jButton_RequestLabTest.setText("Request Lab Test");
        jButton_RequestLabTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RequestLabTestActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(jButton_LoadPatientsq, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jButton_SetAppointment, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jButton_WritePrescription, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jButton_RequestLabTest, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton_LoadPatientsq, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_SetAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_WritePrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_RequestLabTest, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(519, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton_WritePrescription, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(jButton_LoadPatientsq, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_RequestLabTest, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_SetAppointment, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane_PatientsPage.addTab("", jLayeredPane1);

        jTabbedPane1.addTab("Patients", jTabbedPane_PatientsPage);

        jTable_Appointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable_Appointments);

        jButton_LoadAppointment.setText("Load Appointments");
        jButton_LoadAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_LoadAppointmentActionPerformed(evt);
            }
        });

        jButton_DeleteAppointment.setText("Delete Appointment");
        jButton_DeleteAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DeleteAppointmentActionPerformed(evt);
            }
        });

        jButton_UpdateAppointment.setText("Update Appointment");
        jButton_UpdateAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_UpdateAppointmentActionPerformed(evt);
            }
        });

        jLayeredPane2.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jButton_LoadAppointment, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jButton_DeleteAppointment, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jButton_UpdateAppointment, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton_LoadAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_DeleteAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_UpdateAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(719, Short.MAX_VALUE))
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton_DeleteAppointment, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(jButton_UpdateAppointment, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_LoadAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane_AppointmentsPage.addTab("", jLayeredPane2);

        jTabbedPane1.addTab("Appointments", jTabbedPane_AppointmentsPage);

        jTable_Prescriptions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable_Prescriptions);

        jButton_LoadPrescription.setText("Load Prescriptions");
        jButton_LoadPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_LoadPrescriptionActionPerformed(evt);
            }
        });

        jButton_DeletePrescription.setText("Delete Prescription");
        jButton_DeletePrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DeletePrescriptionActionPerformed(evt);
            }
        });

        jButton_UpdatePrescription.setText("Update Prescription");
        jButton_UpdatePrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_UpdatePrescriptionActionPerformed(evt);
            }
        });

        jLayeredPane3.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(jButton_LoadPrescription, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(jButton_DeletePrescription, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(jButton_UpdatePrescription, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane3Layout = new javax.swing.GroupLayout(jLayeredPane3);
        jLayeredPane3.setLayout(jLayeredPane3Layout);
        jLayeredPane3Layout.setHorizontalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1319, Short.MAX_VALUE)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton_LoadPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_DeletePrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_UpdatePrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane3Layout.setVerticalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton_DeletePrescription, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(jButton_LoadPrescription, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_UpdatePrescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane_PrescriptionsPage.addTab("", jLayeredPane3);

        jTabbedPane1.addTab("Prescriptions", jTabbedPane_PrescriptionsPage);

        jTable_Admissions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable_Admissions);

        jButton_DischargePatient.setText("Discharge Patient");
        jButton_DischargePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DischargePatientActionPerformed(evt);
            }
        });

        jButton_LoadAdmissions.setText("Load Admissions");
        jButton_LoadAdmissions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_LoadAdmissionsActionPerformed(evt);
            }
        });

        jButton_AddAdmission.setText("Add Admission");
        jButton_AddAdmission.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddAdmissionActionPerformed(evt);
            }
        });

        jButton_UpdateAdmission1.setText("Update Admission");
        jButton_UpdateAdmission1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_UpdateAdmission1ActionPerformed(evt);
            }
        });

        jLayeredPane4.setLayer(jScrollPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(jButton_DischargePatient, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(jButton_LoadAdmissions, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(jButton_AddAdmission, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(jButton_UpdateAdmission1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane4Layout = new javax.swing.GroupLayout(jLayeredPane4);
        jLayeredPane4.setLayout(jLayeredPane4Layout);
        jLayeredPane4Layout.setHorizontalGroup(
            jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane4Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jLayeredPane4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton_LoadAdmissions, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_AddAdmission, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jButton_UpdateAdmission1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_DischargePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane4Layout.setVerticalGroup(
            jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane4Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_LoadAdmissions, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(jButton_DischargePatient, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(jButton_AddAdmission, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(jButton_UpdateAdmission1, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane5.addTab("", jLayeredPane4);

        jTabbedPane1.addTab("Admissions", jTabbedPane5);

        jTable_LabTests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(jTable_LabTests);

        jButton_LoadLabTests.setText("Load Lab Tests");
        jButton_LoadLabTests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_LoadLabTestsActionPerformed(evt);
            }
        });

        jButton_RequestNewLabTest.setText("Request New Lab Test");
        jButton_RequestNewLabTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RequestNewLabTestActionPerformed(evt);
            }
        });

        jButton_UpdateLabTest.setText("Update Lab Test");
        jButton_UpdateLabTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_UpdateLabTestActionPerformed(evt);
            }
        });

        jButton_DeleteLabTest.setText("Delete Lab Test");
        jButton_DeleteLabTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DeleteLabTestActionPerformed(evt);
            }
        });

        jLayeredPane5.setLayer(jScrollPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane5.setLayer(jButton_LoadLabTests, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane5.setLayer(jButton_RequestNewLabTest, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane5.setLayer(jButton_UpdateLabTest, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane5.setLayer(jButton_DeleteLabTest, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane5Layout = new javax.swing.GroupLayout(jLayeredPane5);
        jLayeredPane5.setLayout(jLayeredPane5Layout);
        jLayeredPane5Layout.setHorizontalGroup(
            jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1319, Short.MAX_VALUE)
            .addGroup(jLayeredPane5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton_LoadLabTests, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_RequestNewLabTest, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jButton_UpdateLabTest, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_DeleteLabTest, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane5Layout.setVerticalGroup(
            jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane5Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_LoadLabTests, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(jButton_DeleteLabTest, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(jButton_RequestNewLabTest, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(jButton_UpdateLabTest, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );

        jTabbedPane6.addTab("", jLayeredPane5);

        jTabbedPane1.addTab("Lab Tests", jTabbedPane6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_DeleteLabTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DeleteLabTestActionPerformed
        int selectedRow = jTable_LabTests.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a lab test to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get the TestID from the selected row
        int testID = (int) jTable_LabTests.getValueAt(selectedRow, 0);

        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to delete this lab test?",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );

        if (confirm == JOptionPane.YES_OPTION) {
            deleteLabTest(testID);
        }
    }//GEN-LAST:event_jButton_DeleteLabTestActionPerformed

    private void jButton_UpdateLabTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_UpdateLabTestActionPerformed
        int selectedRow = jTable_LabTests.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a lab test.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get the TestID from the selected row
        int testID = (int) jTable_LabTests.getValueAt(selectedRow, 0);

        // Open the UpdateLabTestPage with the selected TestID
        new UpdateLabTestPage(testID).setVisible(true);
    }//GEN-LAST:event_jButton_UpdateLabTestActionPerformed

    private void jButton_RequestNewLabTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RequestNewLabTestActionPerformed
        new RequestNewLabTestPage(doctorID).setVisible(true);
    }//GEN-LAST:event_jButton_RequestNewLabTestActionPerformed

    private void jButton_LoadLabTestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_LoadLabTestsActionPerformed
        loadLabTests();
    }//GEN-LAST:event_jButton_LoadLabTestsActionPerformed

    private void jButton_UpdateAdmission1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_UpdateAdmission1ActionPerformed
        int selectedRow = jTable_Admissions.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an admission.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int admissionID = (int) jTable_Admissions.getValueAt(selectedRow, 0); // Get the AdmissionID from the selected row
        new UpdateAdmissionPage(admissionID).setVisible(true); // Pass the correct AdmissionID
    }//GEN-LAST:event_jButton_UpdateAdmission1ActionPerformed

    private void jButton_AddAdmissionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddAdmissionActionPerformed
        new AddAdmissionPage(doctorID).setVisible(true);
    }//GEN-LAST:event_jButton_AddAdmissionActionPerformed

    private void jButton_LoadAdmissionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_LoadAdmissionsActionPerformed
        loadAdmissions();
    }//GEN-LAST:event_jButton_LoadAdmissionsActionPerformed

    private void jButton_DischargePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DischargePatientActionPerformed
        int selectedRow = jTable_Admissions.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an admission.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int admissionID = (int) jTable_Admissions.getValueAt(selectedRow, 0); // Get the selected admission ID
        new DischargePatientPage(admissionID).setVisible(true);
    }//GEN-LAST:event_jButton_DischargePatientActionPerformed

    private void jButton_UpdatePrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_UpdatePrescriptionActionPerformed
        int selectedRow = jTable_Prescriptions.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a prescription.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int prescriptionID = (int) jTable_Prescriptions.getValueAt(selectedRow, 0);
        new UpdatePrescriptionPage(prescriptionID).setVisible(true);
    }//GEN-LAST:event_jButton_UpdatePrescriptionActionPerformed

    private void jButton_DeletePrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DeletePrescriptionActionPerformed

        int selectedRow = jTable_Prescriptions.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a prescription.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int prescriptionID = (int) jTable_Prescriptions.getValueAt(selectedRow, 0);
        new DeletePrescriptionPage(prescriptionID).setVisible(true);

    }//GEN-LAST:event_jButton_DeletePrescriptionActionPerformed

    private void jButton_LoadPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_LoadPrescriptionActionPerformed
        loadPrescriptions();
    }//GEN-LAST:event_jButton_LoadPrescriptionActionPerformed

    private void jButton_UpdateAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_UpdateAppointmentActionPerformed

        int selectedRow = jTable_Appointments.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an appointment.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int appointmentID = (int) jTable_Appointments.getValueAt(selectedRow, 0); // Seçili randevunun ID'si
        new UpdateAppointmentPage(appointmentID).setVisible(true);

    }//GEN-LAST:event_jButton_UpdateAppointmentActionPerformed

    private void jButton_DeleteAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DeleteAppointmentActionPerformed

        int selectedRow = jTable_Appointments.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an appointment.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int appointmentID = (int) jTable_Appointments.getValueAt(selectedRow, 0); // Seçili randevunun ID'si
        new DeleteAppointmentPage(appointmentID).setVisible(true);

    }//GEN-LAST:event_jButton_DeleteAppointmentActionPerformed

    private void jButton_LoadAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_LoadAppointmentActionPerformed
        loadAppointments();
    }//GEN-LAST:event_jButton_LoadAppointmentActionPerformed

    private void jButton_RequestLabTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RequestLabTestActionPerformed
        int selectedRow = jTable_Patient.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a patient.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int patientID = (int) jTable_Patient.getValueAt(selectedRow, 0); // Seçili hastanın ID'si
        new RequestLabTestPage(patientID, doctorID).setVisible(true);
    }//GEN-LAST:event_jButton_RequestLabTestActionPerformed

    private void jButton_WritePrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_WritePrescriptionActionPerformed
        int selectedRow = jTable_Patient.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a patient.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int patientID = (int) jTable_Patient.getValueAt(selectedRow, 0); // Seçili hastanın ID'si
        new WritePrescriptionPage(patientID, doctorID).setVisible(true);
    }//GEN-LAST:event_jButton_WritePrescriptionActionPerformed

    private void jButton_SetAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SetAppointmentActionPerformed
        int selectedRow = jTable_Patient.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a patient.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int patientID = (int) jTable_Patient.getValueAt(selectedRow, 0); // Seçili hastanın ID'si
        new SetAppointmentPage(patientID, doctorID).setVisible(true);
    }//GEN-LAST:event_jButton_SetAppointmentActionPerformed

    private void jButton_LoadPatientsqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_LoadPatientsqActionPerformed
        loadPatients();
    }//GEN-LAST:event_jButton_LoadPatientsqActionPerformed

    private void loadAppointments() {
        System.out.println("Loading appointments for Doctor ID: " + doctorID);

        try ( Connection conn = DatabaseConnection.getConnection()) {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Database connection failed.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Doktora atanmış randevuları getir
            String query = "SELECT a.AppointmentID, CONCAT(u.FirstName, ' ', u.LastName) AS PatientName, "
                    + "a.AppointmentDate, a.Status, a.Notes "
                    + "FROM Appointments a "
                    + "JOIN Patients p ON a.PatientID = p.PatientID "
                    + "JOIN Users u ON p.UserID = u.UserID "
                    + "WHERE a.DoctorID = ?";
            System.out.println("SQL Query: " + query);

            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, doctorID);
            ResultSet rs = ps.executeQuery();

            // JTable için model oluştur
            String[] columnNames = {"Appointment ID", "Patient Name", "Date", "Status", "Notes"};
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);

            // Verileri JTable'a ekle
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("AppointmentID"),
                    rs.getString("PatientName"),
                    rs.getTimestamp("AppointmentDate"),
                    rs.getString("Status"),
                    rs.getString("Notes")
                };
                model.addRow(row);
            }

            jTable_Appointments.setModel(model);
            System.out.println("Appointments loaded successfully.");
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error loading appointments: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error loading appointments.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadPatients() {
        System.out.println("Loading patients for Doctor ID: " + doctorID);

        try ( Connection conn = DatabaseConnection.getConnection()) {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Database connection failed.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Doktor ile ilişkili hastaları al
            String query = "SELECT p.PatientID, CONCAT(u.FirstName, ' ', u.LastName) AS PatientName, u.Email, p.ContactNumber, p.RegistrationDate "
                    + "FROM Patients p "
                    + "JOIN Users u ON p.UserID = u.UserID "
                    + "JOIN Appointments a ON p.PatientID = a.PatientID "
                    + "WHERE a.DoctorID = ? "
                    + "GROUP BY p.PatientID, u.FirstName, u.LastName, u.Email, p.ContactNumber, p.RegistrationDate";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, doctorID);
            ResultSet rs = ps.executeQuery();

            // JTable için model oluştur
            String[] columnNames = {"Patient ID", "Name", "Email", "Contact Number", "Registration Date"};
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);

            // Verileri JTable'a ekle
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("PatientID"),
                    rs.getString("PatientName"),
                    rs.getString("Email"),
                    rs.getString("ContactNumber"), // ContactNumber Patients tablosundan alınır
                    rs.getTimestamp("RegistrationDate")
                };
                model.addRow(row);
            }

            jTable_Patient.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading patients.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadPrescriptions() {
        System.out.println("Loading prescriptions for Doctor ID: " + doctorID);

        try ( Connection conn = DatabaseConnection.getConnection()) {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Database connection failed.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String query = "SELECT p.PrescriptionID, CONCAT(u.FirstName, ' ', u.LastName) AS PatientName, "
                    + "p.DateIssued, pi.Quantity, i.ItemName, p.Notes "
                    + "FROM Prescriptions p "
                    + "JOIN PrescriptionItems pi ON p.PrescriptionID = pi.PrescriptionID "
                    + "JOIN Patients pt ON p.PatientID = pt.PatientID "
                    + "JOIN Users u ON pt.UserID = u.UserID "
                    + "JOIN PharmacyInventory i ON pi.ItemID = i.ItemID "
                    + "WHERE p.DoctorID = ?";
            System.out.println("SQL Query: " + query);

            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, doctorID);
            ResultSet rs = ps.executeQuery();

            String[] columnNames = {"Prescription ID", "Patient Name", "Date Issued", "Item Name", "Quantity", "Notes"};
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);

            while (rs.next()) {
                Object[] row = {
                    rs.getInt("PrescriptionID"),
                    rs.getString("PatientName"),
                    rs.getTimestamp("DateIssued"),
                    rs.getString("ItemName"),
                    rs.getInt("Quantity"),
                    rs.getString("Notes")
                };
                model.addRow(row);
            }

            jTable_Prescriptions.setModel(model);
            System.out.println("Prescriptions loaded successfully.");
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error loading prescriptions: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error loading prescriptions.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadAdmissions() {
        System.out.println("Loading admissions for Doctor ID: " + doctorID);

        try ( Connection conn = DatabaseConnection.getConnection()) {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Database connection failed.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String query = "SELECT a.AdmissionID, CONCAT(u.FirstName, ' ', u.LastName) AS PatientName, "
                    + "r.RoomNumber, r.RoomType, a.AdmissionDate, a.DischargeDate, "
                    + "CONCAT(n.FirstName, ' ', n.LastName) AS NurseName, a.Notes "
                    + "FROM Admissions a "
                    + "JOIN Patients p ON a.PatientID = p.PatientID "
                    + "JOIN Users u ON p.UserID = u.UserID "
                    + "JOIN Rooms r ON a.RoomID = r.RoomID "
                    + "LEFT JOIN Staff n ON a.ResponsibleNurseID = n.StaffID AND n.Role = 'Nurse' "
                    + "WHERE a.ResponsibleDoctorID = ?";
            System.out.println("SQL Query: " + query);

            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, doctorID);
            ResultSet rs = ps.executeQuery();

            String[] columnNames = {
                "Admission ID", "Patient Name", "Room Number", "Room Type",
                "Admission Date", "Discharge Date", "Responsible Nurse", "Notes"
            };
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);

            while (rs.next()) {
                Object[] row = {
                    rs.getInt("AdmissionID"),
                    rs.getString("PatientName"),
                    rs.getString("RoomNumber"),
                    rs.getString("RoomType"),
                    rs.getTimestamp("AdmissionDate"),
                    rs.getTimestamp("DischargeDate"),
                    rs.getString("NurseName"),
                    rs.getString("Notes")
                };
                model.addRow(row);
            }

            jTable_Admissions.setModel(model);
            System.out.println("Admissions loaded successfully.");
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error loading admissions: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error loading admissions.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadLabTests() {
        try ( Connection conn = DatabaseConnection.getConnection()) {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Database connection failed.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String query = "SELECT lt.TestID, "
                    + "CONCAT(pu.FirstName, ' ', pu.LastName) AS PatientName, "
                    + "lt.TestName, lt.TestDate, "
                    + "CONCAT(t.FirstName, ' ', t.LastName) AS TechnicianName, "
                    + "lt.TestResult "
                    + "FROM LabTests lt "
                    + "JOIN Patients p ON lt.PatientID = p.PatientID "
                    + "JOIN Users pu ON p.UserID = pu.UserID "
                    + "LEFT JOIN LabTechnicians t ON lt.TechnicianID = t.TechnicianID";

            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery();

            DefaultTableModel model = new DefaultTableModel(
                    new String[]{"Test ID", "Patient Name", "Test Name", "Test Date", "Technician Name", "Test Result"},
                    0
            );

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("TestID"),
                    rs.getString("PatientName"),
                    rs.getString("TestName"),
                    rs.getTimestamp("TestDate"),
                    rs.getString("TechnicianName"),
                    rs.getString("TestResult")
                });
            }

            jTable_LabTests.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading lab tests.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteLabTest(int testID) {
        try ( Connection conn = DatabaseConnection.getConnection()) {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Database connection failed.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String query = "DELETE FROM LabTests WHERE TestID = ?";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, testID);

            int rowsDeleted = ps.executeUpdate();
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "Lab test deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadLabTests();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete lab test.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error deleting lab test.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorPage(doctorID).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_AddAdmission;
    private javax.swing.JButton jButton_DeleteAppointment;
    private javax.swing.JButton jButton_DeleteLabTest;
    private javax.swing.JButton jButton_DeletePrescription;
    private javax.swing.JButton jButton_DischargePatient;
    private javax.swing.JButton jButton_LoadAdmissions;
    private javax.swing.JButton jButton_LoadAppointment;
    private javax.swing.JButton jButton_LoadLabTests;
    private javax.swing.JButton jButton_LoadPatientsq;
    private javax.swing.JButton jButton_LoadPrescription;
    private javax.swing.JButton jButton_RequestLabTest;
    private javax.swing.JButton jButton_RequestNewLabTest;
    private javax.swing.JButton jButton_SetAppointment;
    private javax.swing.JButton jButton_UpdateAdmission1;
    private javax.swing.JButton jButton_UpdateAppointment;
    private javax.swing.JButton jButton_UpdateLabTest;
    private javax.swing.JButton jButton_UpdatePrescription;
    private javax.swing.JButton jButton_WritePrescription;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLayeredPane jLayeredPane4;
    private javax.swing.JLayeredPane jLayeredPane5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTabbedPane jTabbedPane6;
    private javax.swing.JTabbedPane jTabbedPane_AppointmentsPage;
    private javax.swing.JTabbedPane jTabbedPane_PatientsPage;
    private javax.swing.JTabbedPane jTabbedPane_PrescriptionsPage;
    private javax.swing.JTable jTable_Admissions;
    private javax.swing.JTable jTable_Appointments;
    private javax.swing.JTable jTable_LabTests;
    private javax.swing.JTable jTable_Patient;
    private javax.swing.JTable jTable_Prescriptions;
    // End of variables declaration//GEN-END:variables
}
