/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hbys.gui.forms;
import hbys.AdminPanelDAO.AdmissionDAO;
import hbys.AdminPanelDAO.InvoiceDAO;
import hbys.AdminPanelDAO.AppointmentDAO;
import hbys.AdminPanelDAO.DoctorDAO;
import hbys.AdminPanelDAO.DocumentAccessDAO;
import hbys.AdminPanelDAO.DocumentDAO;
import hbys.AdminPanelDAO.BillingDAO;
import hbys.AdminPanelDAO.LabTechnicianDAO;
import hbys.AdminPanelDAO.LabTestAssignmentDAO;
import hbys.AdminPanelDAO.LabTestDAO;
import hbys.AdminPanelDAO.MedicalRecordDAO;
import hbys.AdminPanelDAO.PatientDAO;
import hbys.AdminPanelDAO.PharmacyInventoryDAO;
import hbys.AdminPanelDAO.PrescriptionDAO;
import hbys.AdminPanelDAO.PrescriptionDetailsDAO;
import hbys.AdminPanelDAO.PrescriptionItemsDAO;
import hbys.AdminPanelDAO.ReportDetailDAO;
import hbys.AdminModels.Room;
import hbys.AdminPanelDAO.RoomDAO;
import hbys.AdminPanelDAO.StaffDAO;
import hbys.AdminPanelDAO.UserDAO;
import hbys.database.DatabaseConnection;
import hbys.AdminModels.Admission;
import hbys.AdminModels.Appointment;
import hbys.AdminModels.Doctor;
import hbys.AdminModels.Document;
import hbys.AdminModels.DocumentAccess;
import hbys.AdminModels.Billing;
import hbys.AdminModels.InvoiceDetail;
import hbys.AdminModels.LabTechnician;
import hbys.AdminModels.LabTest;
import hbys.AdminModels.LabTestAssignment;
import hbys.AdminModels.MedicalRecord;
import hbys.AdminModels.Patient1;
import hbys.AdminModels.PharmacyItem;
import hbys.AdminModels.Prescription;
import hbys.AdminModels.PrescriptionDetail;
import hbys.AdminModels.PrescriptionItem;
import hbys.AdminModels.ReportDetail;
import hbys.AdminModels.Staff;
import hbys.AdminModels.User;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class AdminPanel extends javax.swing.JFrame {

    /**
     * Creates new form AdminPanel
     */
    public AdminPanel() {
        initComponents();
        populateRoomTable();
        populateAppointmentTable();
        populateBillingTable();
        populateInvoiceTable();
        populateLabTestTable();
        populatePrescriptionTable();
        populatePatientTable();
        populateDoctorTable();
        populateDocumentAccessTable();
        populateDocumentsTable();
        populateLabTechniciansTable();
        populateStaffTable();
        populateReportTable();
        populateAdmissionTable();
        populateLabTestAssignmentTable();
        populateMedicalRecordsTable();
        populatePharmacyInventoryTable();
        populatePrescriptionDetailsTable();
        populatePrescriptionItemsTable();
        populateUsersTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable9 = new javax.swing.JTable();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTable13 = new javax.swing.JTable();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableAppointments = new javax.swing.JTable();
        jButtonDeleteAppoitment = new javax.swing.JButton();
        jButtonUpdateAppoitment = new javax.swing.JButton();
        jButtonAddAppointment = new javax.swing.JButton();
        txtSearchAppointments = new javax.swing.JTextField();
        btnSearchAppoitment = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableBillingManagement = new javax.swing.JTable();
        jButtonDeleteBillingManagement = new javax.swing.JButton();
        jButtonUpdateBillingManagement = new javax.swing.JButton();
        jButtonAddBillingManagement = new javax.swing.JButton();
        txtSearchBillingManagement = new javax.swing.JTextField();
        btnSearchBillingManagement = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableLabTests = new javax.swing.JTable();
        jButtonDeleteLabResult = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButtonAddLabResult = new javax.swing.JButton();
        btnSearchLabTest = new javax.swing.JButton();
        txtSearchLabTest = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTablePrescriptions = new javax.swing.JTable();
        jButtonDeletePrescription = new javax.swing.JButton();
        jButtonUpdatePrescription = new javax.swing.JButton();
        jButtonAddPrescription = new javax.swing.JButton();
        txtSearchPrescription = new javax.swing.JTextField();
        btnSearchPrescription = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jButtonDeleteRoom = new javax.swing.JButton();
        jButtonUpdateRoom = new javax.swing.JButton();
        jButtonAddRoom = new javax.swing.JButton();
        txtSearchRooms = new javax.swing.JTextField();
        jButtonSearchRoom = new javax.swing.JButton();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTableRooms = new javax.swing.JTable();
        jButtonCheckAvailability = new javax.swing.JButton();
        txtRoomID = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTablePatients = new javax.swing.JTable();
        jButtonDeletePatient = new javax.swing.JButton();
        jButtonUpdatePatient = new javax.swing.JButton();
        jButtonAddPatient = new javax.swing.JButton();
        txtSearchPatient = new javax.swing.JTextField();
        JButtonSearchPatient = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTableDoctors = new javax.swing.JTable();
        jButtonDeleteDoctor = new javax.swing.JButton();
        jButtonUpdateDoctor = new javax.swing.JButton();
        jButtonAddDoctor = new javax.swing.JButton();
        txtSearchDoctors = new javax.swing.JTextField();
        btnSearchDoctor = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        txtSearchDocumentAccess = new javax.swing.JTextField();
        btnSearchDocumentAccessManagement = new javax.swing.JButton();
        jButtonAddDocumentAccessManagement = new javax.swing.JButton();
        jButtonDeleteDocumentAccessManagement = new javax.swing.JButton();
        jButtonUpdateDocumentAccessManagement = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTableDocumentAccess = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        txtSearchDocument = new javax.swing.JTextField();
        btnSearchDocument = new javax.swing.JButton();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTableDocuments = new javax.swing.JTable();
        jButtonAddDocument = new javax.swing.JButton();
        jButtonDeleteDocument = new javax.swing.JButton();
        jButtonUpdateDocument = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jButtonAddInvoiceDetails = new javax.swing.JButton();
        jButtonDeleteInvoiceDetails = new javax.swing.JButton();
        jButtonUpdateInvoiceDetails = new javax.swing.JButton();
        txtSearchInvoiceDetails = new javax.swing.JTextField();
        btnSearchInvoiceDetails = new javax.swing.JButton();
        jScrollPane17 = new javax.swing.JScrollPane();
        jTableInvoiceDetails = new javax.swing.JTable();
        jPanel14 = new javax.swing.JPanel();
        jButtonAddLabTechnicians = new javax.swing.JButton();
        jButtonLabTechnicians = new javax.swing.JButton();
        jButtonUpdateLabTechnicians = new javax.swing.JButton();
        txtSearchLabTechnicians = new javax.swing.JTextField();
        btnSearchLabTechnicians = new javax.swing.JButton();
        jScrollPane18 = new javax.swing.JScrollPane();
        jTableLabTechnicians = new javax.swing.JTable();
        jPanel15 = new javax.swing.JPanel();
        jButtonAddStaff = new javax.swing.JButton();
        jButtonDeleteStaff = new javax.swing.JButton();
        jButtonUpdateStaff = new javax.swing.JButton();
        txtSearchStaff = new javax.swing.JTextField();
        btnSearchStaff = new javax.swing.JButton();
        jScrollPane19 = new javax.swing.JScrollPane();
        jTableStaff = new javax.swing.JTable();
        jPanel16 = new javax.swing.JPanel();
        jButtonUpdateReport = new javax.swing.JButton();
        txtSearchReport = new javax.swing.JTextField();
        btnSearchReport = new javax.swing.JButton();
        jScrollPane20 = new javax.swing.JScrollPane();
        jTableReports = new javax.swing.JTable();
        jButtonAddReport = new javax.swing.JButton();
        jButtonDeleteReport = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jButtonAddAdmissions = new javax.swing.JButton();
        jButtonDeleteAdmissions = new javax.swing.JButton();
        jButtonUpdateAdmissions = new javax.swing.JButton();
        txtSearchAdmissions = new javax.swing.JTextField();
        btnSearchAdmissions = new javax.swing.JButton();
        jScrollPane21 = new javax.swing.JScrollPane();
        jTableAdmissions = new javax.swing.JTable();
        jPanel18 = new javax.swing.JPanel();
        jButtonTestAssignments = new javax.swing.JButton();
        jButtonUpdateTestAssignments = new javax.swing.JButton();
        jButtonAddTestAssignments = new javax.swing.JButton();
        txtSearchLabTestAssignments = new javax.swing.JTextField();
        jButtonSearchTestAssignments = new javax.swing.JButton();
        jScrollPane22 = new javax.swing.JScrollPane();
        jTableLabTestAssignments = new javax.swing.JTable();
        jPanel19 = new javax.swing.JPanel();
        jButtonDeleteMedicalRecords = new javax.swing.JButton();
        jButtonUpdateMedicalRecords = new javax.swing.JButton();
        jButtonAddMedicalRecords = new javax.swing.JButton();
        txtSearchMedicalRecords = new javax.swing.JTextField();
        jButtonSearchMedicalRecords = new javax.swing.JButton();
        jScrollPane23 = new javax.swing.JScrollPane();
        jTableMedicalRecords = new javax.swing.JTable();
        jPanel20 = new javax.swing.JPanel();
        jButtonDeletePharmacyInventory = new javax.swing.JButton();
        jButtonUpdatePharmacyInventory = new javax.swing.JButton();
        jButtonAddPharmacyInventory = new javax.swing.JButton();
        txtSearchPharmacyInventory = new javax.swing.JTextField();
        jButtonSearchPharmacyInventory = new javax.swing.JButton();
        jScrollPane24 = new javax.swing.JScrollPane();
        jTablePharmacyInventory = new javax.swing.JTable();
        jPanel21 = new javax.swing.JPanel();
        jButtonDeletePrescriptionDetails = new javax.swing.JButton();
        jButtonUpdatePrescriptionDetails = new javax.swing.JButton();
        jButtonAddPrescriptionDetails = new javax.swing.JButton();
        txtSearchPrescriptionDetails = new javax.swing.JTextField();
        jButtonSearchPrescriptionDetails = new javax.swing.JButton();
        jScrollPane25 = new javax.swing.JScrollPane();
        jTablePrescriptionDetails = new javax.swing.JTable();
        jPanel22 = new javax.swing.JPanel();
        jButtonDeletePrescriptionItems = new javax.swing.JButton();
        jButtonUpdatePrescriptionItems = new javax.swing.JButton();
        jButtonAddPrescriptionItems = new javax.swing.JButton();
        txtSearchPrescriptionItems = new javax.swing.JTextField();
        jButtonSearchPrescriptionItems = new javax.swing.JButton();
        jScrollPane26 = new javax.swing.JScrollPane();
        jTablePrescriptionItems = new javax.swing.JTable();
        jPanel23 = new javax.swing.JPanel();
        txtSearchUsers = new javax.swing.JTextField();
        jButtonSearchUsers = new javax.swing.JButton();
        jScrollPane27 = new javax.swing.JScrollPane();
        jTableUsers = new javax.swing.JTable();
        jButtonDeleteUsers = new javax.swing.JButton();
        jButtonUpdateUsers = new javax.swing.JButton();
        jButtonAddUsers = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("jButton1");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jTable9.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(jTable9);

        jButton5.setText("REFRESH");

        jButton3.setText("UPDATE");

        jButton2.setText("DELETE");

        jButton4.setText("ADD");

        jTable13.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane13.setViewportView(jTable13);

        jButton26.setText("REFRESH");

        jButton27.setText("DELETE");

        jButton28.setText("UPDATE");

        jButton29.setText("ADD");

        jButton6.setText("jButton6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane3.setName(""); // NOI18N

        jTableAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "AppointmentID", "PatientID", "DoctorID", "AppointmentDate", "Status", "Notes"
            }
        ));
        jScrollPane6.setViewportView(jTableAppointments);

        jButtonDeleteAppoitment.setText("DELETE");
        jButtonDeleteAppoitment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteAppoitmentActionPerformed(evt);
            }
        });

        jButtonUpdateAppoitment.setText("UPDATE");
        jButtonUpdateAppoitment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateAppoitmentActionPerformed(evt);
            }
        });

        jButtonAddAppointment.setText("ADD");
        jButtonAddAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddAppointmentActionPerformed(evt);
            }
        });

        txtSearchAppointments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchAppointmentsActionPerformed(evt);
            }
        });

        btnSearchAppoitment.setText("Search");
        btnSearchAppoitment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchAppoitmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(640, 640, 640)
                        .addComponent(txtSearchAppointments, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)
                        .addComponent(btnSearchAppoitment, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 1612, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(50, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonAddAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(164, 164, 164)
                .addComponent(jButtonDeleteAppoitment, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(157, 157, 157)
                .addComponent(jButtonUpdateAppoitment, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(412, 412, 412))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchAppoitment, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchAppointments, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeleteAppoitment, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateAppoitment, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jTabbedPane3.addTab("Appointment ", jPanel6);

        jTableBillingManagement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "BillID", "AppointmentID", "TotalAmount", "PaymentStatus", "IssueDate"
            }
        ));
        jScrollPane7.setViewportView(jTableBillingManagement);

        jButtonDeleteBillingManagement.setText("DELETE");
        jButtonDeleteBillingManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteBillingManagementActionPerformed(evt);
            }
        });

        jButtonUpdateBillingManagement.setText("UPDATE");
        jButtonUpdateBillingManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateBillingManagementActionPerformed(evt);
            }
        });

        jButtonAddBillingManagement.setText("ADD");
        jButtonAddBillingManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddBillingManagementActionPerformed(evt);
            }
        });

        btnSearchBillingManagement.setText("Search");
        btnSearchBillingManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchBillingManagementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(603, 603, 603)
                        .addComponent(jButtonAddBillingManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(134, 134, 134)
                        .addComponent(jButtonDeleteBillingManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(115, 115, 115)
                        .addComponent(jButtonUpdateBillingManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(714, 714, 714)
                        .addComponent(txtSearchBillingManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(btnSearchBillingManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 1581, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchBillingManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchBillingManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeleteBillingManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateBillingManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddBillingManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jTabbedPane3.addTab("Billing ", jPanel7);

        jTableLabTests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "TestID", "PatientID", "TechnicianID", "TestName", "TestDate", "TestResult"
            }
        ));
        jScrollPane8.setViewportView(jTableLabTests);

        jButtonDeleteLabResult.setText("DELETE");
        jButtonDeleteLabResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteLabResultActionPerformed(evt);
            }
        });

        jButton16.setText("UPDATE");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButtonAddLabResult.setText("ADD");
        jButtonAddLabResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddLabResultActionPerformed(evt);
            }
        });

        btnSearchLabTest.setText("search");
        btnSearchLabTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchLabTestActionPerformed(evt);
            }
        });

        txtSearchLabTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchLabTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(753, 753, 753)
                        .addComponent(txtSearchLabTest, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74)
                        .addComponent(btnSearchLabTest, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(583, 583, 583)
                        .addComponent(jButtonAddLabResult, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(134, 134, 134)
                        .addComponent(jButtonDeleteLabResult, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130)
                        .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 1600, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchLabTest, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchLabTest, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteLabResult, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddLabResult, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Lab Test", jPanel8);

        jTablePrescriptions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "PrescriptionID", "PatientID", "DoctorID", "DateIssued", "Notes"
            }
        ));
        jScrollPane11.setViewportView(jTablePrescriptions);

        jButtonDeletePrescription.setText("DELETE");
        jButtonDeletePrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletePrescriptionActionPerformed(evt);
            }
        });

        jButtonUpdatePrescription.setText("UPDATE");
        jButtonUpdatePrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdatePrescriptionActionPerformed(evt);
            }
        });

        jButtonAddPrescription.setText("ADD");
        jButtonAddPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPrescriptionActionPerformed(evt);
            }
        });

        txtSearchPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchPrescriptionActionPerformed(evt);
            }
        });

        btnSearchPrescription.setText("search");
        btnSearchPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchPrescriptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap(158, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addComponent(jButtonAddPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(141, 141, 141)
                        .addComponent(jButtonDeletePrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(136, 136, 136)
                        .addComponent(jButtonUpdatePrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(476, 476, 476))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addComponent(txtSearchPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(btnSearchPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(668, 668, 668))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 1440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(122, 122, 122))))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeletePrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdatePrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jTabbedPane3.addTab("Prescription ", jPanel9);

        jButtonDeleteRoom.setText("DELETE");
        jButtonDeleteRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteRoomActionPerformed(evt);
            }
        });

        jButtonUpdateRoom.setText("UPDATE");
        jButtonUpdateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateRoomActionPerformed(evt);
            }
        });

        jButtonAddRoom.setText("ADD");
        jButtonAddRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddRoomActionPerformed(evt);
            }
        });

        txtSearchRooms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchRoomsActionPerformed(evt);
            }
        });

        jButtonSearchRoom.setText("search");
        jButtonSearchRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchRoomActionPerformed(evt);
            }
        });

        jTableRooms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "RoomID", "RoomType", "RoomNumber", "AvailabilityStatus"
            }
        ));
        jScrollPane15.setViewportView(jTableRooms);

        jButtonCheckAvailability.setText("Check Room Availability");
        jButtonCheckAvailability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckAvailabilityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtSearchRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jButtonSearchRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(193, 193, 193)
                .addComponent(txtRoomID, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButtonCheckAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(120, 120, 120))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(603, 603, 603)
                        .addComponent(jButtonAddRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(jButtonDeleteRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(jButtonUpdateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 1568, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSearchRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCheckAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRoomID, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeleteRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jTabbedPane3.addTab("Room ", jPanel10);

        jTablePatients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "UserID", "Date Of Birth", "Gender", "Contact Number", "Address", "Registration Date"
            }
        ));
        jScrollPane14.setViewportView(jTablePatients);

        jButtonDeletePatient.setText("DELETE");
        jButtonDeletePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletePatientActionPerformed(evt);
            }
        });

        jButtonUpdatePatient.setText("UPDATE");
        jButtonUpdatePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdatePatientActionPerformed(evt);
            }
        });

        jButtonAddPatient.setText("ADD");
        jButtonAddPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPatientActionPerformed(evt);
            }
        });

        JButtonSearchPatient.setText("Search");
        JButtonSearchPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JButtonSearchPatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(553, 553, 553)
                        .addComponent(jButtonAddPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(133, 133, 133)
                        .addComponent(jButtonDeletePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(138, 138, 138)
                        .addComponent(jButtonUpdatePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(672, 672, 672)
                        .addComponent(txtSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74)
                        .addComponent(JButtonSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 1614, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JButtonSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeletePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdatePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jTabbedPane3.addTab("Patient ", jPanel2);

        jTableDoctors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "DoctorID", "FirstName ", "LastName ", "Specialization ", "ContactNumber", "Email", "AvailabilityStatus", "JoinDate"
            }
        ));
        jScrollPane10.setViewportView(jTableDoctors);
        if (jTableDoctors.getColumnModel().getColumnCount() > 0) {
            jTableDoctors.getColumnModel().getColumn(4).setHeaderValue("ContactNumber");
            jTableDoctors.getColumnModel().getColumn(5).setHeaderValue("Email");
            jTableDoctors.getColumnModel().getColumn(6).setHeaderValue("AvailabilityStatus");
            jTableDoctors.getColumnModel().getColumn(7).setHeaderValue("JoinDate");
        }

        jButtonDeleteDoctor.setText("DELETE");
        jButtonDeleteDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteDoctorActionPerformed(evt);
            }
        });

        jButtonUpdateDoctor.setText("UPDATE");
        jButtonUpdateDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateDoctorActionPerformed(evt);
            }
        });

        jButtonAddDoctor.setText("ADD");
        jButtonAddDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddDoctorActionPerformed(evt);
            }
        });

        btnSearchDoctor.setText("Search");
        btnSearchDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDoctorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(572, 572, 572)
                        .addComponent(jButtonAddDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(133, 133, 133)
                        .addComponent(jButtonDeleteDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(111, 111, 111)
                        .addComponent(jButtonUpdateDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(721, 721, 721)
                        .addComponent(txtSearchDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(btnSearchDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 1591, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeleteDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jTabbedPane3.addTab("Doctor", jPanel5);

        btnSearchDocumentAccessManagement.setText("Search");
        btnSearchDocumentAccessManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDocumentAccessManagementActionPerformed(evt);
            }
        });

        jButtonAddDocumentAccessManagement.setText("ADD");
        jButtonAddDocumentAccessManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddDocumentAccessManagementActionPerformed(evt);
            }
        });

        jButtonDeleteDocumentAccessManagement.setText("DELETE");
        jButtonDeleteDocumentAccessManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteDocumentAccessManagementActionPerformed(evt);
            }
        });

        jButtonUpdateDocumentAccessManagement.setText("UPDATE");
        jButtonUpdateDocumentAccessManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateDocumentAccessManagementActionPerformed(evt);
            }
        });

        jTableDocumentAccess.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "AccessID", "DocumentID", "UserID", "Access Level ", "Access Date"
            }
        ));
        jScrollPane12.setViewportView(jTableDocumentAccess);
        if (jTableDocumentAccess.getColumnModel().getColumnCount() > 0) {
            jTableDocumentAccess.getColumnModel().getColumn(4).setHeaderValue("ContactNumber");
        }

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(715, 715, 715)
                        .addComponent(txtSearchDocumentAccess, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(btnSearchDocumentAccessManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(565, 565, 565)
                        .addComponent(jButtonAddDocumentAccessManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130)
                        .addComponent(jButtonDeleteDocumentAccessManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(153, 153, 153)
                        .addComponent(jButtonUpdateDocumentAccessManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 1574, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchDocumentAccess, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchDocumentAccessManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddDocumentAccessManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteDocumentAccessManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateDocumentAccessManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane3.addTab("Document Access ", jPanel11);

        txtSearchDocument.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchDocumentActionPerformed(evt);
            }
        });

        btnSearchDocument.setText("Search");
        btnSearchDocument.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDocumentActionPerformed(evt);
            }
        });

        jTableDocuments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "DocumentID", "Document Type", "RelatedID", "MadeBy", "MadeFor", "MadeDate", "Status", "Description"
            }
        ));
        jScrollPane16.setViewportView(jTableDocuments);
        if (jTableDocuments.getColumnModel().getColumnCount() > 0) {
            jTableDocuments.getColumnModel().getColumn(4).setHeaderValue("ContactNumber");
            jTableDocuments.getColumnModel().getColumn(5).setHeaderValue("Email");
            jTableDocuments.getColumnModel().getColumn(6).setHeaderValue("AvailabilityStatus");
            jTableDocuments.getColumnModel().getColumn(7).setHeaderValue("JoinDate");
        }

        jButtonAddDocument.setText("ADD");
        jButtonAddDocument.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddDocumentActionPerformed(evt);
            }
        });

        jButtonDeleteDocument.setText("DELETE");
        jButtonDeleteDocument.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteDocumentActionPerformed(evt);
            }
        });

        jButtonUpdateDocument.setText("UPDATE");
        jButtonUpdateDocument.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateDocumentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(663, 663, 663)
                        .addComponent(txtSearchDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(btnSearchDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(565, 565, 565)
                        .addComponent(jButtonAddDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(142, 142, 142)
                        .addComponent(jButtonDeleteDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(129, 129, 129)
                        .addComponent(jButtonUpdateDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 1596, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateDocument, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Documents ", jPanel12);

        jButtonAddInvoiceDetails.setText("ADD");
        jButtonAddInvoiceDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddInvoiceDetailsActionPerformed(evt);
            }
        });

        jButtonDeleteInvoiceDetails.setText("DELETE");
        jButtonDeleteInvoiceDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteInvoiceDetailsActionPerformed(evt);
            }
        });

        jButtonUpdateInvoiceDetails.setText("UPDATE");
        jButtonUpdateInvoiceDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateInvoiceDetailsActionPerformed(evt);
            }
        });

        txtSearchInvoiceDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchInvoiceDetailsActionPerformed(evt);
            }
        });

        btnSearchInvoiceDetails.setText("Search");
        btnSearchInvoiceDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchInvoiceDetailsActionPerformed(evt);
            }
        });

        jTableInvoiceDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "InvoiceDetailID", "DocumentID", "Item Description", "Quantity", "Unit Price", "Total Price"
            }
        ));
        jScrollPane17.setViewportView(jTableInvoiceDetails);
        if (jTableInvoiceDetails.getColumnModel().getColumnCount() > 0) {
            jTableInvoiceDetails.getColumnModel().getColumn(4).setHeaderValue("ContactNumber");
            jTableInvoiceDetails.getColumnModel().getColumn(5).setHeaderValue("Email");
        }

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(636, 636, 636)
                        .addComponent(txtSearchInvoiceDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(btnSearchInvoiceDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(545, 545, 545)
                        .addComponent(jButtonAddInvoiceDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102)
                        .addComponent(jButtonDeleteInvoiceDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(95, 95, 95)
                        .addComponent(jButtonUpdateInvoiceDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 1587, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchInvoiceDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchInvoiceDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddInvoiceDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteInvoiceDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateInvoiceDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Invoice Details ", jPanel13);

        jButtonAddLabTechnicians.setText("ADD");
        jButtonAddLabTechnicians.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddLabTechniciansActionPerformed(evt);
            }
        });

        jButtonLabTechnicians.setText("DELETE");
        jButtonLabTechnicians.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLabTechniciansActionPerformed(evt);
            }
        });

        jButtonUpdateLabTechnicians.setText("UPDATE");
        jButtonUpdateLabTechnicians.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateLabTechniciansActionPerformed(evt);
            }
        });

        txtSearchLabTechnicians.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchLabTechniciansActionPerformed(evt);
            }
        });

        btnSearchLabTechnicians.setText("Search");
        btnSearchLabTechnicians.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchLabTechniciansActionPerformed(evt);
            }
        });

        jTableLabTechnicians.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "TechnicianID", "FirstName ", "LastName ", "ContactNumber", "Email", "HireDate"
            }
        ));
        jScrollPane18.setViewportView(jTableLabTechnicians);
        if (jTableLabTechnicians.getColumnModel().getColumnCount() > 0) {
            jTableLabTechnicians.getColumnModel().getColumn(3).setHeaderValue("ContactNumber");
            jTableLabTechnicians.getColumnModel().getColumn(4).setHeaderValue("Email");
            jTableLabTechnicians.getColumnModel().getColumn(5).setHeaderValue("JoinDate");
        }

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(660, 660, 660)
                        .addComponent(txtSearchLabTechnicians, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(btnSearchLabTechnicians, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(549, 549, 549)
                        .addComponent(jButtonAddLabTechnicians, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(112, 112, 112)
                        .addComponent(jButtonLabTechnicians, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107)
                        .addComponent(jButtonUpdateLabTechnicians, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 1598, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchLabTechnicians, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchLabTechnicians, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddLabTechnicians, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonLabTechnicians, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateLabTechnicians, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Lab Technicians", jPanel14);

        jButtonAddStaff.setText("ADD");
        jButtonAddStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddStaffActionPerformed(evt);
            }
        });

        jButtonDeleteStaff.setText("DELETE");
        jButtonDeleteStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteStaffActionPerformed(evt);
            }
        });

        jButtonUpdateStaff.setText("UPDATE");
        jButtonUpdateStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateStaffActionPerformed(evt);
            }
        });

        txtSearchStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchStaffActionPerformed(evt);
            }
        });

        btnSearchStaff.setText("Search");
        btnSearchStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchStaffActionPerformed(evt);
            }
        });

        jTableStaff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "DoctorID", "FirstName ", "LastName ", "Specialization ", "ContactNumber", "Email", "AvailabilityStatus", "JoinDate"
            }
        ));
        jScrollPane19.setViewportView(jTableStaff);
        if (jTableStaff.getColumnModel().getColumnCount() > 0) {
            jTableStaff.getColumnModel().getColumn(4).setHeaderValue("ContactNumber");
            jTableStaff.getColumnModel().getColumn(5).setHeaderValue("Email");
            jTableStaff.getColumnModel().getColumn(6).setHeaderValue("AvailabilityStatus");
            jTableStaff.getColumnModel().getColumn(7).setHeaderValue("JoinDate");
        }

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(701, 701, 701)
                        .addComponent(txtSearchStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(btnSearchStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 1600, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(61, Short.MAX_VALUE))
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonAddStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(137, 137, 137)
                .addComponent(jButtonDeleteStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(143, 143, 143)
                .addComponent(jButtonUpdateStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(454, 454, 454))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Staff", jPanel15);

        jButtonUpdateReport.setText("UPDATE");
        jButtonUpdateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateReportActionPerformed(evt);
            }
        });

        txtSearchReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchReportActionPerformed(evt);
            }
        });

        btnSearchReport.setText("Search");
        btnSearchReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchReportActionPerformed(evt);
            }
        });

        jTableReports.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "RaportID", "DocumentID", "Report Title", "Report Content"
            }
        ));
        jScrollPane20.setViewportView(jTableReports);

        jButtonAddReport.setText("ADD");
        jButtonAddReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddReportActionPerformed(evt);
            }
        });

        jButtonDeleteReport.setText("DELETE");
        jButtonDeleteReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGap(730, 730, 730)
                        .addComponent(txtSearchReport, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(btnSearchReport, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGap(539, 539, 539)
                        .addComponent(jButtonAddReport, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(150, 150, 150)
                        .addComponent(jButtonDeleteReport, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(152, 152, 152)
                        .addComponent(jButtonUpdateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 1575, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchReport, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchReport, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddReport, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteReport, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Report Details", jPanel16);

        jButtonAddAdmissions.setText("ADD");
        jButtonAddAdmissions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddAdmissionsActionPerformed(evt);
            }
        });

        jButtonDeleteAdmissions.setText("DELETE");
        jButtonDeleteAdmissions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteAdmissionsActionPerformed(evt);
            }
        });

        jButtonUpdateAdmissions.setText("UPDATE");
        jButtonUpdateAdmissions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateAdmissionsActionPerformed(evt);
            }
        });

        txtSearchAdmissions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchAdmissionsActionPerformed(evt);
            }
        });

        btnSearchAdmissions.setText("Search");
        btnSearchAdmissions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchAdmissionsActionPerformed(evt);
            }
        });

        jTableAdmissions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "RaportID", "DocumentID", "Report Title", "Report Content"
            }
        ));
        jScrollPane21.setViewportView(jTableAdmissions);

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(715, 715, 715)
                        .addComponent(txtSearchAdmissions, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(btnSearchAdmissions, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 1610, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonAddAdmissions, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(188, 188, 188)
                .addComponent(jButtonDeleteAdmissions, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(195, 195, 195)
                .addComponent(jButtonUpdateAdmissions, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(369, 369, 369))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchAdmissions, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchAdmissions, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddAdmissions, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteAdmissions, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateAdmissions, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Addmissions", jPanel17);

        jButtonTestAssignments.setText("DELETE");
        jButtonTestAssignments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTestAssignmentsActionPerformed(evt);
            }
        });

        jButtonUpdateTestAssignments.setText("UPDATE");
        jButtonUpdateTestAssignments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateTestAssignmentsActionPerformed(evt);
            }
        });

        jButtonAddTestAssignments.setText("ADD");
        jButtonAddTestAssignments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddTestAssignmentsActionPerformed(evt);
            }
        });

        txtSearchLabTestAssignments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchLabTestAssignmentsActionPerformed(evt);
            }
        });

        jButtonSearchTestAssignments.setText("search");
        jButtonSearchTestAssignments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchTestAssignmentsActionPerformed(evt);
            }
        });

        jTableLabTestAssignments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "AssignmentID", "TestID", "TechnicianID", "AssignmentDate"
            }
        ));
        jScrollPane22.setViewportView(jTableLabTestAssignments);

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtSearchLabTestAssignments, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jButtonSearchTestAssignments, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(695, 695, 695))
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(jButtonAddTestAssignments, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(152, 152, 152)
                        .addComponent(jButtonTestAssignments, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(156, 156, 156)
                        .addComponent(jButtonUpdateTestAssignments, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 1568, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSearchTestAssignments, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchLabTestAssignments, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonTestAssignments, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateTestAssignments, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddTestAssignments, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jTabbedPane3.addTab("Lab Test Assignments", jPanel18);

        jButtonDeleteMedicalRecords.setText("DELETE");
        jButtonDeleteMedicalRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteMedicalRecordsActionPerformed(evt);
            }
        });

        jButtonUpdateMedicalRecords.setText("UPDATE");
        jButtonUpdateMedicalRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateMedicalRecordsActionPerformed(evt);
            }
        });

        jButtonAddMedicalRecords.setText("ADD");
        jButtonAddMedicalRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddMedicalRecordsActionPerformed(evt);
            }
        });

        txtSearchMedicalRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchMedicalRecordsActionPerformed(evt);
            }
        });

        jButtonSearchMedicalRecords.setText("search");
        jButtonSearchMedicalRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchMedicalRecordsActionPerformed(evt);
            }
        });

        jTableMedicalRecords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "RecordID", "PatientID", "DoctorID", "RecordDate", "Description"
            }
        ));
        jScrollPane23.setViewportView(jTableMedicalRecords);
        if (jTableMedicalRecords.getColumnModel().getColumnCount() > 0) {
            jTableMedicalRecords.getColumnModel().getColumn(0).setHeaderValue("RecordID");
            jTableMedicalRecords.getColumnModel().getColumn(1).setHeaderValue("PatientID");
            jTableMedicalRecords.getColumnModel().getColumn(2).setHeaderValue("DoctorID");
            jTableMedicalRecords.getColumnModel().getColumn(3).setHeaderValue("RecordDate");
            jTableMedicalRecords.getColumnModel().getColumn(4).setHeaderValue("Description");
        }

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtSearchMedicalRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jButtonSearchMedicalRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(695, 695, 695))
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(jButtonAddMedicalRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(152, 152, 152)
                        .addComponent(jButtonDeleteMedicalRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(156, 156, 156)
                        .addComponent(jButtonUpdateMedicalRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 1568, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSearchMedicalRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchMedicalRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeleteMedicalRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateMedicalRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddMedicalRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jTabbedPane3.addTab("Medical Records", jPanel19);

        jButtonDeletePharmacyInventory.setText("DELETE");
        jButtonDeletePharmacyInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletePharmacyInventoryActionPerformed(evt);
            }
        });

        jButtonUpdatePharmacyInventory.setText("UPDATE");
        jButtonUpdatePharmacyInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdatePharmacyInventoryActionPerformed(evt);
            }
        });

        jButtonAddPharmacyInventory.setText("ADD");
        jButtonAddPharmacyInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPharmacyInventoryActionPerformed(evt);
            }
        });

        txtSearchPharmacyInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchPharmacyInventoryActionPerformed(evt);
            }
        });

        jButtonSearchPharmacyInventory.setText("search");
        jButtonSearchPharmacyInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchPharmacyInventoryActionPerformed(evt);
            }
        });

        jTablePharmacyInventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ItemID", "ItemName", "Quantity", "PricePerUnit", "ExpiryDate", "SupplierName"
            }
        ));
        jScrollPane24.setViewportView(jTablePharmacyInventory);
        if (jTablePharmacyInventory.getColumnModel().getColumnCount() > 0) {
            jTablePharmacyInventory.getColumnModel().getColumn(4).setHeaderValue("ExpiryDate");
            jTablePharmacyInventory.getColumnModel().getColumn(5).setHeaderValue("SupplierName");
        }

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtSearchPharmacyInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jButtonSearchPharmacyInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(695, 695, 695))
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(jButtonAddPharmacyInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(152, 152, 152)
                        .addComponent(jButtonDeletePharmacyInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(156, 156, 156)
                        .addComponent(jButtonUpdatePharmacyInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane24, javax.swing.GroupLayout.PREFERRED_SIZE, 1568, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSearchPharmacyInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchPharmacyInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane24, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeletePharmacyInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdatePharmacyInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddPharmacyInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jTabbedPane3.addTab("Pharmacy Invertory", jPanel20);

        jButtonDeletePrescriptionDetails.setText("DELETE");
        jButtonDeletePrescriptionDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletePrescriptionDetailsActionPerformed(evt);
            }
        });

        jButtonUpdatePrescriptionDetails.setText("UPDATE");
        jButtonUpdatePrescriptionDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdatePrescriptionDetailsActionPerformed(evt);
            }
        });

        jButtonAddPrescriptionDetails.setText("ADD");
        jButtonAddPrescriptionDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPrescriptionDetailsActionPerformed(evt);
            }
        });

        txtSearchPrescriptionDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchPrescriptionDetailsActionPerformed(evt);
            }
        });

        jButtonSearchPrescriptionDetails.setText("search");
        jButtonSearchPrescriptionDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchPrescriptionDetailsActionPerformed(evt);
            }
        });

        jTablePrescriptionDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "PrescriptionDetailID", "DocumentID", "ItemID", "Quantity"
            }
        ));
        jScrollPane25.setViewportView(jTablePrescriptionDetails);

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtSearchPrescriptionDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jButtonSearchPrescriptionDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(695, 695, 695))
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(jButtonAddPrescriptionDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(152, 152, 152)
                        .addComponent(jButtonDeletePrescriptionDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(156, 156, 156)
                        .addComponent(jButtonUpdatePrescriptionDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 1568, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSearchPrescriptionDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchPrescriptionDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeletePrescriptionDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdatePrescriptionDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddPrescriptionDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jTabbedPane3.addTab("Prescription Details", jPanel21);

        jButtonDeletePrescriptionItems.setText("DELETE");
        jButtonDeletePrescriptionItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletePrescriptionItemsActionPerformed(evt);
            }
        });

        jButtonUpdatePrescriptionItems.setText("UPDATE");
        jButtonUpdatePrescriptionItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdatePrescriptionItemsActionPerformed(evt);
            }
        });

        jButtonAddPrescriptionItems.setText("ADD");
        jButtonAddPrescriptionItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPrescriptionItemsActionPerformed(evt);
            }
        });

        txtSearchPrescriptionItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchPrescriptionItemsActionPerformed(evt);
            }
        });

        jButtonSearchPrescriptionItems.setText("search");
        jButtonSearchPrescriptionItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchPrescriptionItemsActionPerformed(evt);
            }
        });

        jTablePrescriptionItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "PrescriptionDetailID", "DocumentID", "ItemID", "Quantity"
            }
        ));
        jScrollPane26.setViewportView(jTablePrescriptionItems);

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtSearchPrescriptionItems, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jButtonSearchPrescriptionItems, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(695, 695, 695))
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(jButtonAddPrescriptionItems, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(152, 152, 152)
                        .addComponent(jButtonDeletePrescriptionItems, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(156, 156, 156)
                        .addComponent(jButtonUpdatePrescriptionItems, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane26, javax.swing.GroupLayout.PREFERRED_SIZE, 1568, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSearchPrescriptionItems, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchPrescriptionItems, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane26, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeletePrescriptionItems, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdatePrescriptionItems, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddPrescriptionItems, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jTabbedPane3.addTab("Prescription Items", jPanel22);

        txtSearchUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchUsersActionPerformed(evt);
            }
        });

        jButtonSearchUsers.setText("search");
        jButtonSearchUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchUsersActionPerformed(evt);
            }
        });

        jTableUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "UserID", "FirstName", "LastName", "Email", "Password", "UserType", "RegistrationDate"
            }
        ));
        jScrollPane27.setViewportView(jTableUsers);

        jButtonDeleteUsers.setText("DELETE");
        jButtonDeleteUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteUsersActionPerformed(evt);
            }
        });

        jButtonUpdateUsers.setText("UPDATE");
        jButtonUpdateUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateUsersActionPerformed(evt);
            }
        });

        jButtonAddUsers.setText("ADD");
        jButtonAddUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddUsersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel23Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtSearchUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jButtonSearchUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(695, 695, 695))
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(jButtonAddUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(152, 152, 152)
                        .addComponent(jButtonDeleteUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(156, 156, 156)
                        .addComponent(jButtonUpdateUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane27, javax.swing.GroupLayout.PREFERRED_SIZE, 1568, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSearchUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane27, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeleteUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdateUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        jTabbedPane3.addTab("Users", jPanel23);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1720, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(130, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDoctorActionPerformed
        // TODO add your handling code here:
         String keyword = txtSearchDoctors.getText();
         populateDoctorTableWithSearch(keyword);
    }//GEN-LAST:event_btnSearchDoctorActionPerformed

    private void jButtonAddDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddDoctorActionPerformed
         try {
        int userID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter User ID:"));
        String specialization = JOptionPane.showInputDialog(this, "Enter Specialization:");
        String contactNumber = JOptionPane.showInputDialog(this, "Enter Contact Number:");
        String availabilityStatus = JOptionPane.showInputDialog(this, "Enter Availability Status:");
        LocalDateTime joinDate = LocalDateTime.now();

        Doctor doctor = new Doctor(0, userID, specialization, contactNumber, availabilityStatus, joinDate);
        DoctorDAO doctorDAO = new DoctorDAO(DatabaseConnection.getConnection());
        doctorDAO.addDoctor(doctor);

        populateDoctorTable();
        JOptionPane.showMessageDialog(this, "Doctor added successfully!");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error adding doctor: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonAddDoctorActionPerformed

    private void jButtonUpdateDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateDoctorActionPerformed
         try {
        int selectedRow = jTableDoctors.getSelectedRow();
        if (selectedRow != -1) {
            int doctorID = (int) jTableDoctors.getValueAt(selectedRow, 0);
            int userID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter User ID:", jTableDoctors.getValueAt(selectedRow, 1)));
            String specialization = JOptionPane.showInputDialog(this, "Enter Specialization:", jTableDoctors.getValueAt(selectedRow, 2));
            String contactNumber = JOptionPane.showInputDialog(this, "Enter Contact Number:", jTableDoctors.getValueAt(selectedRow, 3));
            String availabilityStatus = JOptionPane.showInputDialog(this, "Enter Availability Status:", jTableDoctors.getValueAt(selectedRow, 4));
            LocalDateTime joinDate = (LocalDateTime) jTableDoctors.getValueAt(selectedRow, 5);

            Doctor updatedDoctor = new Doctor(doctorID, userID, specialization, contactNumber, availabilityStatus, joinDate);
            DoctorDAO doctorDAO = new DoctorDAO(DatabaseConnection.getConnection());
            doctorDAO.updateDoctor(updatedDoctor);

            populateDoctorTable();
            JOptionPane.showMessageDialog(this, "Doctor updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a doctor to update.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating doctor: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonUpdateDoctorActionPerformed

    private void jButtonDeleteDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteDoctorActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTableDoctors.getSelectedRow();
        if (selectedRow != -1) {
            int doctorID = (int) jTableDoctors.getValueAt(selectedRow, 0);

            DoctorDAO doctorDAO = new DoctorDAO(DatabaseConnection.getConnection());
            doctorDAO.deleteDoctor(doctorID);

            populateDoctorTable();
            JOptionPane.showMessageDialog(this, "Doctor deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a doctor to delete.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting doctor: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonDeleteDoctorActionPerformed

    private void JButtonSearchPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JButtonSearchPatientActionPerformed
        // TODO add your handling code here:
        String keyword = txtSearchPatient.getText();
        populatePatientTableWithSearch(keyword);
    }//GEN-LAST:event_JButtonSearchPatientActionPerformed

    private void jButtonAddPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPatientActionPerformed
        try {
            // Kullanıcıdan gerekli bilgileri al
            String userIDStr = JOptionPane.showInputDialog(this, "Enter User ID:");
            int userID = Integer.parseInt(userIDStr);
            String dateOfBirth = JOptionPane.showInputDialog(this, "Enter Date of Birth (YYYY-MM-DD):");
            String gender = JOptionPane.showInputDialog(this, "Enter Gender:");
            String contactNumber = JOptionPane.showInputDialog(this, "Enter Contact Number:");
            String address = JOptionPane.showInputDialog(this, "Enter Address:");
            String registrationDate = JOptionPane.showInputDialog(this, "Enter Registration Date (YYYY-MM-DD HH:MM:SS):");

            // Yeni bir Patient1 nesnesi oluştur
            Patient1 patient = new Patient1(0, userID, dateOfBirth, gender, contactNumber, address, registrationDate);

            // DAO'yu kullanarak veritabanına ekle
            PatientDAO patientDAO = new PatientDAO(DatabaseConnection.getConnection());
            patientDAO.addPatient(patient);

            // Tabloyu güncelle
            populatePatientTable();
            JOptionPane.showMessageDialog(this, "Patient added successfully!");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid input! User ID must be a number.");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error adding patient: " + e.getMessage());
        }
    }//GEN-LAST:event_jButtonAddPatientActionPerformed

    private void jButtonUpdatePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdatePatientActionPerformed
        try {
            int selectedRow = jTablePatients.getSelectedRow();
            if (selectedRow != -1) {
                // Seçilen satırdaki mevcut verileri al
                int patientID = (int) jTablePatients.getValueAt(selectedRow, 0);
                int userID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter User ID:", jTablePatients.getValueAt(selectedRow, 1)));
                String dateOfBirth = JOptionPane.showInputDialog(this, "Enter Date of Birth (YYYY-MM-DD):", jTablePatients.getValueAt(selectedRow, 2));
                String gender = JOptionPane.showInputDialog(this, "Enter Gender:", jTablePatients.getValueAt(selectedRow, 3));
                String contactNumber = JOptionPane.showInputDialog(this, "Enter Contact Number:", jTablePatients.getValueAt(selectedRow, 4));
                String address = JOptionPane.showInputDialog(this, "Enter Address:", jTablePatients.getValueAt(selectedRow, 5));
                String registrationDate = JOptionPane.showInputDialog(this, "Enter Registration Date (YYYY-MM-DD HH:MM:SS):", jTablePatients.getValueAt(selectedRow, 6));

                // Güncellenmiş hasta nesnesini oluştur
                Patient1 patient = new Patient1(patientID, userID, dateOfBirth, gender, contactNumber, address, registrationDate);

                // DAO sınıfını kullanarak güncelleme işlemini yap
                PatientDAO patientDAO = new PatientDAO(DatabaseConnection.getConnection());
                patientDAO.updatePatient(patient);

                // Tabloyu yenile
                populatePatientTable();
                JOptionPane.showMessageDialog(this, "Patient updated successfully!");
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row to update.");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid input! User ID must be a number.");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating patient: " + e.getMessage());
        }
    }//GEN-LAST:event_jButtonUpdatePatientActionPerformed

    private void jButtonDeletePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletePatientActionPerformed
        // TODO add your handling code here:
        try {
            int selectedRow = jTablePatients.getSelectedRow();
            if (selectedRow != -1) {
                int patientID = (int) jTablePatients.getValueAt(selectedRow, 0);

                PatientDAO patientDAO = new PatientDAO(DatabaseConnection.getConnection());
                patientDAO.deletePatient(patientID);

                populatePatientTable();
                JOptionPane.showMessageDialog(this, "Patient deleted successfully!");
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error deleting patient: " + e.getMessage());
        }
    }//GEN-LAST:event_jButtonDeletePatientActionPerformed

    private void jButtonSearchRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchRoomActionPerformed
        // TODO add your handling code here:
        String keyword = txtSearchRooms.getText();
        populateRoomTableWithSearch(keyword);
    }//GEN-LAST:event_jButtonSearchRoomActionPerformed

    private void txtSearchRoomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchRoomsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchRoomsActionPerformed

    private void jButtonAddRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddRoomActionPerformed
        try {
        String roomType = JOptionPane.showInputDialog(this, "Enter Room Type:");
        String roomNumber = JOptionPane.showInputDialog(this, "Enter Room Number:");
        String availabilityStatus = JOptionPane.showInputDialog(this, "Enter Availability Status:");

        Room room = new Room(0, roomType, roomNumber, availabilityStatus);
        RoomDAO roomDAO = new RoomDAO(DatabaseConnection.getConnection());
        roomDAO.addRoom(room);

        populateRoomTable();
        JOptionPane.showMessageDialog(this, "Room added successfully!");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error adding room: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonAddRoomActionPerformed

    private void jButtonUpdateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateRoomActionPerformed
         try {
        int selectedRow = jTableRooms.getSelectedRow();
        if (selectedRow != -1) {
            int roomID = (int) jTableRooms.getValueAt(selectedRow, 0);
            String roomType = JOptionPane.showInputDialog(this, "Enter Room Type:", jTableRooms.getValueAt(selectedRow, 1));
            String roomNumber = JOptionPane.showInputDialog(this, "Enter Room Number:", jTableRooms.getValueAt(selectedRow, 2));
            String availabilityStatus = JOptionPane.showInputDialog(this, "Enter Availability Status:", jTableRooms.getValueAt(selectedRow, 3));

            Room updatedRoom = new Room(roomID, roomType, roomNumber, availabilityStatus);
            RoomDAO roomDAO = new RoomDAO(DatabaseConnection.getConnection());
            roomDAO.updateRoom(updatedRoom);

            populateRoomTable();
            JOptionPane.showMessageDialog(this, "Room updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a room to update.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating room: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonUpdateRoomActionPerformed

    private void jButtonDeleteRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteRoomActionPerformed
        try {
        int selectedRow = jTableRooms.getSelectedRow();
        if (selectedRow != -1) {
            int roomID = (int) jTableRooms.getValueAt(selectedRow, 0);

            RoomDAO roomDAO = new RoomDAO(DatabaseConnection.getConnection());
            roomDAO.deleteRoom(roomID);

            populateRoomTable();
            JOptionPane.showMessageDialog(this, "Room deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a room to delete.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting room: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonDeleteRoomActionPerformed

    private void btnSearchPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchPrescriptionActionPerformed
        // TODO add your handling code here:
        String keyword = txtSearchPrescription.getText();
        populatePrescriptionTableWithSearch(keyword);
    }//GEN-LAST:event_btnSearchPrescriptionActionPerformed

    private void txtSearchPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchPrescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchPrescriptionActionPerformed

    private void jButtonAddPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPrescriptionActionPerformed
        try {
            int patientID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter PatientID:"));
            int doctorID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter DoctorID:"));
            LocalDateTime dateIssued = LocalDateTime.now();
            String notes = JOptionPane.showInputDialog(this, "Enter Notes:");

            Prescription prescription = new Prescription(0, patientID, doctorID, dateIssued, notes);
            PrescriptionDAO prescriptionDAO = new PrescriptionDAO(DatabaseConnection.getConnection());
            prescriptionDAO.addPrescription(prescription);

            populatePrescriptionTable();
            JOptionPane.showMessageDialog(this, "Prescription added successfully!");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error adding prescription: " + e.getMessage());
        }
    }//GEN-LAST:event_jButtonAddPrescriptionActionPerformed

    private void jButtonUpdatePrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdatePrescriptionActionPerformed
        try {
            int selectedRow = jTablePrescriptions.getSelectedRow();
            if (selectedRow != -1) {
                int prescriptionID = (int) jTablePrescriptions.getValueAt(selectedRow, 0);
                int patientID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter PatientID:", jTablePrescriptions.getValueAt(selectedRow, 1)));
                int doctorID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter DoctorID:", jTablePrescriptions.getValueAt(selectedRow, 2)));
                String notes = JOptionPane.showInputDialog(this, "Enter Notes:", jTablePrescriptions.getValueAt(selectedRow, 4));
                LocalDateTime dateIssued = LocalDateTime.parse(jTablePrescriptions.getValueAt(selectedRow, 3).toString());

                Prescription prescription = new Prescription(prescriptionID, patientID, doctorID, dateIssued, notes);
                PrescriptionDAO prescriptionDAO = new PrescriptionDAO(DatabaseConnection.getConnection());
                prescriptionDAO.updatePrescription(prescription);

                populatePrescriptionTable();
                JOptionPane.showMessageDialog(this, "Prescription updated successfully!");
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row to update.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating prescription: " + e.getMessage());
        }
    }//GEN-LAST:event_jButtonUpdatePrescriptionActionPerformed

    private void jButtonDeletePrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletePrescriptionActionPerformed
        // TODO add your handling code here:
        try {
            int selectedRow = jTablePrescriptions.getSelectedRow();
            if (selectedRow != -1) {
                int prescriptionID = (int) jTablePrescriptions.getValueAt(selectedRow, 0);

                PrescriptionDAO prescriptionDAO = new PrescriptionDAO(DatabaseConnection.getConnection());
                prescriptionDAO.deletePrescription(prescriptionID);

                populatePrescriptionTable();
                JOptionPane.showMessageDialog(this, "Prescription deleted successfully!");
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error deleting prescription: " + e.getMessage());
        }
    }//GEN-LAST:event_jButtonDeletePrescriptionActionPerformed

    private void txtSearchLabTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchLabTestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchLabTestActionPerformed

    private void btnSearchLabTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchLabTestActionPerformed
        // TODO add your handling code here:
        String keyword = txtSearchLabTest.getText();
        populateLabTestTableWithSearch(keyword);
    }//GEN-LAST:event_btnSearchLabTestActionPerformed

    private void jButtonAddLabResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddLabResultActionPerformed
        // TODO add your handling code here:
        try {
            int patientID = Integer.parseInt(JOptionPane.showInputDialog("Enter Patient ID:"));
            int technicianID = Integer.parseInt(JOptionPane.showInputDialog("Enter Technician ID:"));
            String testName = JOptionPane.showInputDialog("Enter Test Name:");
            LocalDateTime testDate = LocalDateTime.parse(JOptionPane.showInputDialog("Enter Test Date (YYYY-MM-DDTHH:MM):"));
            String testResult = JOptionPane.showInputDialog("Enter Test Result:");

            LabTest labTest = new LabTest(0, patientID, technicianID, testName, testDate, testResult);
            LabTestDAO labTestDAO = new LabTestDAO(DatabaseConnection.getConnection());
            labTestDAO.addLabTest(labTest);

            populateLabTestTable(); // Refresh table
            JOptionPane.showMessageDialog(this, "Lab test added successfully!");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error adding lab test: " + e.getMessage());
        }
    }//GEN-LAST:event_jButtonAddLabResultActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTableLabTests.getSelectedRow();
        if (selectedRow != -1) {
            try {
                int testID = (int) jTableLabTests.getValueAt(selectedRow, 0);
                int patientID = Integer.parseInt(JOptionPane.showInputDialog("Enter new Patient ID:", jTableLabTests.getValueAt(selectedRow, 1)));
                int technicianID = Integer.parseInt(JOptionPane.showInputDialog("Enter new Technician ID:", jTableLabTests.getValueAt(selectedRow, 2)));
                String testName = JOptionPane.showInputDialog("Enter new Test Name:", jTableLabTests.getValueAt(selectedRow, 3));
                LocalDateTime testDate = LocalDateTime.parse(JOptionPane.showInputDialog("Enter new Test Date (YYYY-MM-DDTHH:MM):", jTableLabTests.getValueAt(selectedRow, 4)));
                String testResult = JOptionPane.showInputDialog("Enter new Test Result:", jTableLabTests.getValueAt(selectedRow, 5));

                LabTest labTest = new LabTest(testID, patientID, technicianID, testName, testDate, testResult);
                LabTestDAO labTestDAO = new LabTestDAO(DatabaseConnection.getConnection());
                labTestDAO.updateLabTest(labTest);

                populateLabTestTable(); // Refresh table
                JOptionPane.showMessageDialog(this, "Lab test updated successfully!");
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error updating lab test: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a lab test to update.");
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButtonDeleteLabResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteLabResultActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTableLabTests.getSelectedRow();
        if (selectedRow != -1) {
            int testID = (int) jTableLabTests.getValueAt(selectedRow, 0); // Get TestID
            try {
                LabTestDAO labTestDAO = new LabTestDAO(DatabaseConnection.getConnection());
                labTestDAO.deleteLabTest(testID);

                populateLabTestTable(); // Refresh table
                JOptionPane.showMessageDialog(this, "Lab test deleted successfully!");
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error deleting lab test: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a lab test to delete.");
        }
    }//GEN-LAST:event_jButtonDeleteLabResultActionPerformed

    private void btnSearchBillingManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchBillingManagementActionPerformed
        // TODO add your handling code here:
        String keyword = txtSearchBillingManagement.getText();
        populateInvoiceTableWithSearch(keyword);
    }//GEN-LAST:event_btnSearchBillingManagementActionPerformed

    private void jButtonAddBillingManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddBillingManagementActionPerformed
        // TODO add your handling code here:
        try {
            int appointmentID = Integer.parseInt(JOptionPane.showInputDialog("Enter AppointmentID:"));
            double totalAmount = Double.parseDouble(JOptionPane.showInputDialog("Enter Total Amount:"));
            String paymentStatus = JOptionPane.showInputDialog("Enter Payment Status:");
            String issueDate = JOptionPane.showInputDialog("Enter Issue Date (yyyy-MM-dd):");

            Billing newInvoice = new Billing(0, appointmentID, totalAmount, paymentStatus, LocalDate.parse(issueDate));
            BillingDAO invoiceDAO = new BillingDAO(DatabaseConnection.getConnection());
            invoiceDAO.addInvoice(newInvoice);

            populateInvoiceTable();
            JOptionPane.showMessageDialog(this, "Invoice added successfully!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonAddBillingManagementActionPerformed

    private void jButtonUpdateBillingManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateBillingManagementActionPerformed
        int selectedRow = jTableBillingManagement.getSelectedRow();
        if (selectedRow != -1) {
            try {
                int billID = (int) jTableBillingManagement.getValueAt(selectedRow, 0);
                int appointmentID = Integer.parseInt(JOptionPane.showInputDialog("Enter new AppointmentID:", jTableBillingManagement.getValueAt(selectedRow, 1)));
                double totalAmount = Double.parseDouble(JOptionPane.showInputDialog("Enter new Total Amount:", jTableBillingManagement.getValueAt(selectedRow, 2)));
                String paymentStatus = JOptionPane.showInputDialog("Enter new Payment Status:", jTableBillingManagement.getValueAt(selectedRow, 3));
                String issueDate = JOptionPane.showInputDialog("Enter new Issue Date (yyyy-MM-dd):", jTableBillingManagement.getValueAt(selectedRow, 4));

                Billing updatedInvoice = new Billing(billID, appointmentID, totalAmount, paymentStatus, LocalDate.parse(issueDate));
                BillingDAO invoiceDAO = new BillingDAO(DatabaseConnection.getConnection());
                invoiceDAO.updateInvoice(updatedInvoice);

                populateInvoiceTable();
                JOptionPane.showMessageDialog(this, "Invoice updated successfully!");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an invoice to update.");
        }
    }//GEN-LAST:event_jButtonUpdateBillingManagementActionPerformed

    private void jButtonDeleteBillingManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteBillingManagementActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTableBillingManagement.getSelectedRow();
        if (selectedRow != -1) {
            int billID = (int) jTableBillingManagement.getValueAt(selectedRow, 0);
            try {
                BillingDAO invoiceDAO = new BillingDAO(DatabaseConnection.getConnection());
                invoiceDAO.deleteInvoice(billID);

                populateInvoiceTable();
                JOptionPane.showMessageDialog(this, "Invoice deleted successfully!");
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error deleting invoice: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an invoice to delete.");
        }
    }//GEN-LAST:event_jButtonDeleteBillingManagementActionPerformed

    private void btnSearchAppoitmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchAppoitmentActionPerformed
         String keyword = txtSearchAppointments.getText();
         populateAppointmentTableWithSearch(keyword);
    }//GEN-LAST:event_btnSearchAppoitmentActionPerformed

    private void txtSearchAppointmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchAppointmentsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchAppointmentsActionPerformed

    private void jButtonAddAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddAppointmentActionPerformed
        try {
        int patientID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Patient ID:"));
        int doctorID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Doctor ID:"));
        String appointmentDateStr = JOptionPane.showInputDialog(this, "Enter Appointment Date (YYYY-MM-DD HH:mm):");
        LocalDateTime appointmentDate = LocalDateTime.parse(appointmentDateStr.replace(" ", "T"));
        String status = JOptionPane.showInputDialog(this, "Enter Status:");
        String notes = JOptionPane.showInputDialog(this, "Enter Notes:");

        Appointment appointment = new Appointment(0, patientID, doctorID, appointmentDate, status, notes);
        AppointmentDAO appointmentDAO = new AppointmentDAO(DatabaseConnection.getConnection());
        appointmentDAO.addAppointment(appointment);

        populateAppointmentTable();
        JOptionPane.showMessageDialog(this, "Appointment added successfully!");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error adding appointment: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonAddAppointmentActionPerformed

    private void jButtonUpdateAppoitmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateAppoitmentActionPerformed
        try {
        int selectedRow = jTableAppointments.getSelectedRow();
        if (selectedRow != -1) {
            int appointmentID = (int) jTableAppointments.getValueAt(selectedRow, 0);
            int patientID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Patient ID:", jTableAppointments.getValueAt(selectedRow, 1)));
            int doctorID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Doctor ID:", jTableAppointments.getValueAt(selectedRow, 2)));
            String appointmentDateStr = JOptionPane.showInputDialog(this, "Enter Appointment Date (YYYY-MM-DD HH:mm):", jTableAppointments.getValueAt(selectedRow, 3));
            LocalDateTime appointmentDate = LocalDateTime.parse(appointmentDateStr.replace(" ", "T"));
            String status = JOptionPane.showInputDialog(this, "Enter Status:", jTableAppointments.getValueAt(selectedRow, 4));
            String notes = JOptionPane.showInputDialog(this, "Enter Notes:", jTableAppointments.getValueAt(selectedRow, 5));

            Appointment updatedAppointment = new Appointment(appointmentID, patientID, doctorID, appointmentDate, status, notes);
            AppointmentDAO appointmentDAO = new AppointmentDAO(DatabaseConnection.getConnection());
            appointmentDAO.updateAppointment(updatedAppointment);

            populateAppointmentTable();
            JOptionPane.showMessageDialog(this, "Appointment updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select an appointment to update.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating appointment: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonUpdateAppoitmentActionPerformed

    private void jButtonDeleteAppoitmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteAppoitmentActionPerformed
        try {
        int selectedRow = jTableAppointments.getSelectedRow();
        if (selectedRow != -1) {
            int appointmentID = (int) jTableAppointments.getValueAt(selectedRow, 0);

            AppointmentDAO appointmentDAO = new AppointmentDAO(DatabaseConnection.getConnection());
            appointmentDAO.deleteAppointment(appointmentID);

            populateAppointmentTable();
            JOptionPane.showMessageDialog(this, "Appointment deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select an appointment to delete.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting appointment: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonDeleteAppoitmentActionPerformed

    private void btnSearchDocumentAccessManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDocumentAccessManagementActionPerformed
        try {
        String keyword = txtSearchDocumentAccess.getText().trim();

        // DAO ile arama yap
        DocumentAccessDAO dao = new DocumentAccessDAO(DatabaseConnection.getConnection());
        List<DocumentAccess> results = dao.searchAccess(keyword);

        // Tabloyu güncelle
        DefaultTableModel model = new DefaultTableModel(
            new String[]{"AccessID", "DocumentID", "UserID", "AccessLevel", "AccessDate"}, 0
        );

        for (DocumentAccess access : results) {
            model.addRow(new Object[]{
                access.getAccessID(),
                access.getDocumentID(),
                access.getUserID(),
                access.getAccessLevel(),
                access.getAccessDate()
            });
        }

        jTableDocumentAccess.setModel(model);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error searching document access: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnSearchDocumentAccessManagementActionPerformed

    private void jButtonAddDocumentAccessManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddDocumentAccessManagementActionPerformed
        // TODO add your handling code here:
        try {
        // Kullanıcıdan veri al
        String documentIDStr = JOptionPane.showInputDialog(this, "Enter Document ID:");
        String userIDStr = JOptionPane.showInputDialog(this, "Enter User ID:");
        String accessLevel = JOptionPane.showInputDialog(this, "Enter Access Level (Read/Write):");
        Timestamp accessDate = new Timestamp(System.currentTimeMillis()); // Şu anki zamanı kullan
        
        // Girişleri kontrol et
        if (documentIDStr == null || userIDStr == null || accessLevel == null) {
            JOptionPane.showMessageDialog(this, "Addition canceled.");
            return;
        }

        int documentID = Integer.parseInt(documentIDStr);
        int userID = Integer.parseInt(userIDStr);

        // Yeni DocumentAccess nesnesi oluştur
        DocumentAccess newAccess = new DocumentAccess(0, documentID, userID, accessLevel, accessDate);

        // DAO ile veritabanına ekle
        DocumentAccessDAO dao = new DocumentAccessDAO(DatabaseConnection.getConnection());
        dao.addAccess(newAccess);

        // Tabloyu yenile
        populateDocumentAccessTable();
        JOptionPane.showMessageDialog(this, "Document access added successfully!");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error adding document access: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButtonAddDocumentAccessManagementActionPerformed

    private void jButtonDeleteDocumentAccessManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteDocumentAccessManagementActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTableDocumentAccess.getSelectedRow();
        if (selectedRow != -1) {
            int accessID = (int) jTableDocumentAccess.getValueAt(selectedRow, 0);

            // DAO kullanarak sil
            DocumentAccessDAO dao = new DocumentAccessDAO(DatabaseConnection.getConnection());
            dao.deleteAccess(accessID);

            // Tabloyu yenile
            populateDocumentAccessTable();
            JOptionPane.showMessageDialog(this, "Document access deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error deleting document access: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButtonDeleteDocumentAccessManagementActionPerformed

    private void jButtonUpdateDocumentAccessManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateDocumentAccessManagementActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTableDocumentAccess.getSelectedRow();
        if (selectedRow != -1) {
            int accessID = (int) jTableDocumentAccess.getValueAt(selectedRow, 0);
            int documentID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter new Document ID:", jTableDocumentAccess.getValueAt(selectedRow, 1)));
            int userID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter new User ID:", jTableDocumentAccess.getValueAt(selectedRow, 2)));
            String accessLevel = JOptionPane.showInputDialog(this, "Enter new Access Level (Read/Write):", jTableDocumentAccess.getValueAt(selectedRow, 3));
            Timestamp accessDate = Timestamp.valueOf(jTableDocumentAccess.getValueAt(selectedRow, 4).toString());

            // Güncellenmiş nesne oluştur
            DocumentAccess updatedAccess = new DocumentAccess(accessID, documentID, userID, accessLevel, accessDate);

            // DAO kullanarak güncelle
            DocumentAccessDAO dao = new DocumentAccessDAO(DatabaseConnection.getConnection());
            dao.updateAccess(updatedAccess);

            // Tabloyu yenile
            populateDocumentAccessTable();
            JOptionPane.showMessageDialog(this, "Document access updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error updating document access: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButtonUpdateDocumentAccessManagementActionPerformed

    private void btnSearchDocumentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDocumentActionPerformed
        // TODO add your handling code here:
        try {
        String keyword = txtSearchDocument.getText();
        DocumentDAO documentDAO = new DocumentDAO(DatabaseConnection.getConnection());
        List<Document> documents = documentDAO.searchDocuments(keyword);

        DefaultTableModel model = (DefaultTableModel) jTableDocuments.getModel();
        model.setRowCount(0); // Clear existing rows

        for (Document document : documents) {
            model.addRow(new Object[]{
                document.getDocumentID(),
                document.getDocumentType(),
                document.getRelatedID(),
                document.getCreatedBy(),
                document.getCreatedFor(),
                document.getCreationDate(),
                document.getStatus(),
                document.getDescription()
            });
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error searching documents: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnSearchDocumentActionPerformed

    private void jButtonAddDocumentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddDocumentActionPerformed
        // TODO add your handling code here:
        try {
        String documentType = JOptionPane.showInputDialog("Enter Document Type:");
        int relatedID = Integer.parseInt(JOptionPane.showInputDialog("Enter Related ID:"));
        int createdBy = Integer.parseInt(JOptionPane.showInputDialog("Enter Created By ID:"));
        int createdFor = Integer.parseInt(JOptionPane.showInputDialog("Enter Created For ID:"));
        String status = JOptionPane.showInputDialog("Enter Status:");
        String description = JOptionPane.showInputDialog("Enter Description:");
        Timestamp creationDate = new Timestamp(System.currentTimeMillis());

        Document newDocument = new Document(0, documentType, relatedID, createdBy, createdFor, creationDate, status, description);
        DocumentDAO documentDAO = new DocumentDAO(DatabaseConnection.getConnection());
        documentDAO.addDocument(newDocument);

        populateDocumentsTable();
        JOptionPane.showMessageDialog(this, "Document added successfully!");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error adding document: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButtonAddDocumentActionPerformed

    private void jButtonDeleteDocumentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteDocumentActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTableDocuments.getSelectedRow();
        if (selectedRow != -1) {
            int documentID = (int) jTableDocuments.getValueAt(selectedRow, 0);

            DocumentDAO documentDAO = new DocumentDAO(DatabaseConnection.getConnection());
            documentDAO.deleteDocument(documentID);

            populateDocumentsTable();
            JOptionPane.showMessageDialog(this, "Document deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a document to delete.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error deleting document: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButtonDeleteDocumentActionPerformed

    private void jButtonUpdateDocumentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateDocumentActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTableDocuments.getSelectedRow();
        if (selectedRow != -1) {
            int documentID = (int) jTableDocuments.getValueAt(selectedRow, 0);
            String documentType = (String) jTableDocuments.getValueAt(selectedRow, 1);
            int relatedID = (int) jTableDocuments.getValueAt(selectedRow, 2);
            int createdBy = (int) jTableDocuments.getValueAt(selectedRow, 3);
            int createdFor = (int) jTableDocuments.getValueAt(selectedRow, 4);
            String status = (String) jTableDocuments.getValueAt(selectedRow, 6);
            String description = (String) jTableDocuments.getValueAt(selectedRow, 7);

            documentType = JOptionPane.showInputDialog("Enter Document Type:", documentType);
            relatedID = Integer.parseInt(JOptionPane.showInputDialog("Enter Related ID:", relatedID));
            createdBy = Integer.parseInt(JOptionPane.showInputDialog("Enter Created By ID:", createdBy));
            createdFor = Integer.parseInt(JOptionPane.showInputDialog("Enter Created For ID:", createdFor));
            status = JOptionPane.showInputDialog("Enter Status:", status);
            description = JOptionPane.showInputDialog("Enter Description:", description);

            Document updatedDocument = new Document(documentID, documentType, relatedID, createdBy, createdFor, null, status, description);
            DocumentDAO documentDAO = new DocumentDAO(DatabaseConnection.getConnection());
            documentDAO.updateDocument(updatedDocument);

            populateDocumentsTable();
            JOptionPane.showMessageDialog(this, "Document updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a document to update.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error updating document: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButtonUpdateDocumentActionPerformed

    private void txtSearchDocumentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchDocumentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchDocumentActionPerformed

    private void jButtonAddInvoiceDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddInvoiceDetailsActionPerformed
        // TODO add your handling code here:
        try {
        // Get inputs from the user
        int documentID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Document ID:"));
        String itemDescription = JOptionPane.showInputDialog(this, "Enter Item Description:");
        int quantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Quantity:"));
        double unitPrice = Double.parseDouble(JOptionPane.showInputDialog(this, "Enter Unit Price:"));

        // Calculate Total Price
        double totalPrice = quantity * unitPrice;

        // Create a new InvoiceDetail object
        InvoiceDetail newDetail = new InvoiceDetail(0, documentID, itemDescription, quantity, unitPrice, totalPrice);

        // Add the record to the database
        InvoiceDAO invoiceDAO = new InvoiceDAO(DatabaseConnection.getConnection());
        invoiceDAO.addInvoiceDetail(newDetail);

        // Refresh the table
        populateInvoiceTable();
        JOptionPane.showMessageDialog(this, "Invoice detail added successfully!");
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid input! Please enter valid data.");
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error adding invoice detail: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButtonAddInvoiceDetailsActionPerformed

    private void jButtonDeleteInvoiceDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteInvoiceDetailsActionPerformed
        // TODO add your handling code here:
         try {
        // Get the selected row
        int selectedRow = jTableInvoiceDetails.getSelectedRow();
        if (selectedRow != -1) {
            // Get the InvoiceDetailID of the selected row
            int invoiceDetailID = (int) jTableInvoiceDetails.getValueAt(selectedRow, 0);

            // Delete the record from the database
            InvoiceDAO invoiceDAO = new InvoiceDAO(DatabaseConnection.getConnection());
            invoiceDAO.deleteInvoiceDetail(invoiceDetailID);

            // Refresh the table
            populateInvoiceTable();
            JOptionPane.showMessageDialog(this, "Invoice detail deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select an invoice detail to delete.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error deleting invoice detail: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButtonDeleteInvoiceDetailsActionPerformed

    private void jButtonUpdateInvoiceDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateInvoiceDetailsActionPerformed
        // TODO add your handling code here:
        try {
        // Get the selected row
        int selectedRow = jTableInvoiceDetails.getSelectedRow();
        if (selectedRow != -1) {
            // Get current values
            int invoiceDetailID = (int) jTableInvoiceDetails.getValueAt(selectedRow, 0);
            int documentID = (int) jTableInvoiceDetails.getValueAt(selectedRow, 1);
            String itemDescription = (String) jTableInvoiceDetails.getValueAt(selectedRow, 2);
            int quantity = (int) jTableInvoiceDetails.getValueAt(selectedRow, 3);
            double unitPrice = (double) jTableInvoiceDetails.getValueAt(selectedRow, 4);

            // Prompt the admin for updated values
            int newDocumentID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter new Document ID:", documentID));
            String newItemDescription = JOptionPane.showInputDialog(this, "Enter new Item Description:", itemDescription);
            int newQuantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter new Quantity:", quantity));
            double newUnitPrice = Double.parseDouble(JOptionPane.showInputDialog(this, "Enter new Unit Price:", unitPrice));

            // Calculate new Total Price
            double newTotalPrice = newQuantity * newUnitPrice;

            // Create an updated InvoiceDetail object
            InvoiceDetail updatedDetail = new InvoiceDetail(invoiceDetailID, newDocumentID, newItemDescription, newQuantity, newUnitPrice, newTotalPrice);

            // Update the record in the database
            InvoiceDAO invoiceDAO = new InvoiceDAO(DatabaseConnection.getConnection());
            invoiceDAO.updateInvoiceDetail(updatedDetail);

            // Refresh the table
            populateInvoiceTable();
            JOptionPane.showMessageDialog(this, "Invoice detail updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select an invoice detail to update.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid input! Please enter valid data.");
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error updating invoice detail: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButtonUpdateInvoiceDetailsActionPerformed

    private void txtSearchInvoiceDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchInvoiceDetailsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchInvoiceDetailsActionPerformed

    private void btnSearchInvoiceDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchInvoiceDetailsActionPerformed
        // TODO add your handling code here:
        try {
        String keyword = txtSearchInvoiceDetails.getText().trim();
        InvoiceDAO invoiceDAO = new InvoiceDAO(DatabaseConnection.getConnection());
        List<InvoiceDetail> invoiceDetails;

        if (keyword.isEmpty()) {
            invoiceDetails = invoiceDAO.getAllInvoiceDetails();
        } else {
            invoiceDetails = invoiceDAO.searchInvoiceDetails(keyword);
        }

        // Update the table model with search results
        DefaultTableModel model = new DefaultTableModel(
            new String[]{"InvoiceDetailID", "DocumentID", "ItemDescription", "Quantity", "UnitPrice", "TotalPrice"}, 0
        );

        for (InvoiceDetail detail : invoiceDetails) {
            model.addRow(new Object[]{
                detail.getInvoiceDetailID(),
                detail.getDocumentID(),
                detail.getItemDescription(),
                detail.getQuantity(),
                detail.getUnitPrice(),
                detail.getTotalPrice()
            });
        }

        jTableInvoiceDetails.setModel(model);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error searching invoice details: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnSearchInvoiceDetailsActionPerformed

    private void jButtonAddLabTechniciansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddLabTechniciansActionPerformed
        try {
        // Prompt the user for input
        String firstName = JOptionPane.showInputDialog(this, "Enter First Name:");
        String lastName = JOptionPane.showInputDialog(this, "Enter Last Name:");
        String contactNumber = JOptionPane.showInputDialog(this, "Enter Contact Number:");
        String email = JOptionPane.showInputDialog(this, "Enter Email:");

        // Check if all inputs are valid
        if (firstName == null || lastName == null || contactNumber == null || email == null) {
            JOptionPane.showMessageDialog(this, "Lab Technician addition canceled.");
            return;
        }

        // Automatically set today's date and time as the hire date
        LocalDateTime hireDate = LocalDateTime.now();

        // Create a new LabTechnician object
        LabTechnician newTechnician = new LabTechnician(0, firstName, lastName, contactNumber, email, hireDate);

        // Use the DAO to save the new technician to the database
        LabTechnicianDAO technicianDAO = new LabTechnicianDAO(DatabaseConnection.getConnection());
        technicianDAO.addLabTechnician(newTechnician);

        // Refresh the table
        populateLabTechniciansTable();

        JOptionPane.showMessageDialog(this, "Lab Technician added successfully!");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error adding Lab Technician: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButtonAddLabTechniciansActionPerformed

    private void jButtonLabTechniciansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLabTechniciansActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTableLabTechnicians.getSelectedRow();
        if (selectedRow != -1) {
            int technicianID = (int) jTableLabTechnicians.getValueAt(selectedRow, 0);

            int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this Lab Technician?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
            if (confirmation == JOptionPane.YES_OPTION) {
                LabTechnicianDAO technicianDAO = new LabTechnicianDAO(DatabaseConnection.getConnection());
                technicianDAO.deleteLabTechnician(technicianID);

                populateLabTechniciansTable();
                JOptionPane.showMessageDialog(this, "Lab Technician deleted successfully!");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error deleting Lab Technician: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButtonLabTechniciansActionPerformed

    private void jButtonUpdateLabTechniciansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateLabTechniciansActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTableLabTechnicians.getSelectedRow();
        if (selectedRow != -1) {
            int technicianID = (int) jTableLabTechnicians.getValueAt(selectedRow, 0);
            String currentFirstName = (String) jTableLabTechnicians.getValueAt(selectedRow, 1);
            String currentLastName = (String) jTableLabTechnicians.getValueAt(selectedRow, 2);
            String currentContactNumber = (String) jTableLabTechnicians.getValueAt(selectedRow, 3);
            String currentEmail = (String) jTableLabTechnicians.getValueAt(selectedRow, 4);
            String currentHireDate = jTableLabTechnicians.getValueAt(selectedRow, 5).toString();

            String newFirstName = JOptionPane.showInputDialog(this, "Enter First Name:", currentFirstName);
            String newLastName = JOptionPane.showInputDialog(this, "Enter Last Name:", currentLastName);
            String newContactNumber = JOptionPane.showInputDialog(this, "Enter Contact Number:", currentContactNumber);
            String newEmail = JOptionPane.showInputDialog(this, "Enter Email:", currentEmail);
            String newHireDate = JOptionPane.showInputDialog(this, "Enter Hire Date (YYYY-MM-DDTHH:MM:SS):", currentHireDate);

            LocalDateTime parsedHireDate = LocalDateTime.parse(newHireDate);

            LabTechnician technician = new LabTechnician(technicianID, newFirstName, newLastName, newContactNumber, newEmail, parsedHireDate);
            LabTechnicianDAO technicianDAO = new LabTechnicianDAO(DatabaseConnection.getConnection());
            technicianDAO.updateLabTechnician(technician);

            populateLabTechniciansTable();
            JOptionPane.showMessageDialog(this, "Lab Technician updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error updating Lab Technician: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButtonUpdateLabTechniciansActionPerformed

    private void txtSearchLabTechniciansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchLabTechniciansActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchLabTechniciansActionPerformed

    private void btnSearchLabTechniciansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchLabTechniciansActionPerformed
        // TODO add your handling code here:
        try {
        String keyword = txtSearchLabTechnicians.getText().trim();
        LabTechnicianDAO technicianDAO = new LabTechnicianDAO(DatabaseConnection.getConnection());
        List<LabTechnician> technicians = technicianDAO.searchLabTechnicians(keyword);

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"TechnicianID", "FirstName", "LastName", "ContactNumber", "Email", "HireDate"}, 0
        );

        for (LabTechnician technician : technicians) {
            model.addRow(new Object[]{
                technician.getTechnicianID(),
                technician.getFirstName(),
                technician.getLastName(),
                technician.getContactNumber(),
                technician.getEmail(),
                technician.getHireDate()
            });
        }

        jTableLabTechnicians.setModel(model);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error searching Lab Technicians: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnSearchLabTechniciansActionPerformed

    private void jButtonAddStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddStaffActionPerformed
        // TODO add your handling code here:
        try {
        String firstName = JOptionPane.showInputDialog(this, "Enter First Name:");
        String lastName = JOptionPane.showInputDialog(this, "Enter Last Name:");
        String role = JOptionPane.showInputDialog(this, "Enter Role:");
        String contactNumber = JOptionPane.showInputDialog(this, "Enter Contact Number:");
        String email = JOptionPane.showInputDialog(this, "Enter Email:");
        LocalDateTime joinDate = LocalDateTime.now();

        Staff newStaff = new Staff(0, firstName, lastName, role, contactNumber, email, joinDate);
        StaffDAO staffDAO = new StaffDAO(DatabaseConnection.getConnection());
        staffDAO.addStaff(newStaff);

        populateStaffTable();
        JOptionPane.showMessageDialog(this, "Staff added successfully!");
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error adding staff: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonAddStaffActionPerformed

    private void jButtonDeleteStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteStaffActionPerformed
        // TODO add your handling code here:
         try {
        int selectedRow = jTableStaff.getSelectedRow();
        if (selectedRow != -1) {
            int staffID = (int) jTableStaff.getValueAt(selectedRow, 0);
            StaffDAO staffDAO = new StaffDAO(DatabaseConnection.getConnection());
            staffDAO.deleteStaff(staffID);

            populateStaffTable();
            JOptionPane.showMessageDialog(this, "Staff deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error deleting staff: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonDeleteStaffActionPerformed

    private void jButtonUpdateStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateStaffActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTableStaff.getSelectedRow();
        if (selectedRow != -1) {
            int staffID = (int) jTableStaff.getValueAt(selectedRow, 0);
            String firstName = (String) JOptionPane.showInputDialog(this, "Enter First Name:", jTableStaff.getValueAt(selectedRow, 1));
            String lastName = (String) JOptionPane.showInputDialog(this, "Enter Last Name:", jTableStaff.getValueAt(selectedRow, 2));
            String role = (String) JOptionPane.showInputDialog(this, "Enter Role:", jTableStaff.getValueAt(selectedRow, 3));
            String contactNumber = (String) JOptionPane.showInputDialog(this, "Enter Contact Number:", jTableStaff.getValueAt(selectedRow, 4));
            String email = (String) JOptionPane.showInputDialog(this, "Enter Email:", jTableStaff.getValueAt(selectedRow, 5));

            Staff updatedStaff = new Staff(staffID, firstName, lastName, role, contactNumber, email, null);
            StaffDAO staffDAO = new StaffDAO(DatabaseConnection.getConnection());
            staffDAO.updateStaff(updatedStaff);

            populateStaffTable();
            JOptionPane.showMessageDialog(this, "Staff updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error updating staff: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonUpdateStaffActionPerformed

    private void txtSearchStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchStaffActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchStaffActionPerformed

    private void btnSearchStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchStaffActionPerformed
        // TODO add your handling code here:
        String keyword = txtSearchStaff.getText().trim(); // Get text from search field
        populateStaffTableWithSearch(keyword); // Call the populate method with the search keyword
    }//GEN-LAST:event_btnSearchStaffActionPerformed

    private void jButtonUpdateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateReportActionPerformed
        // TODO add your handling code here:
         try {
        int selectedRow = jTableReports.getSelectedRow();
        if (selectedRow != -1) {
            int reportID = (int) jTableReports.getValueAt(selectedRow, 0);
            int documentID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter DocumentID:", jTableReports.getValueAt(selectedRow, 1)));
            String title = JOptionPane.showInputDialog(this, "Enter Report Title:", jTableReports.getValueAt(selectedRow, 2));
            String content = JOptionPane.showInputDialog(this, "Enter Report Content:", jTableReports.getValueAt(selectedRow, 3));

            ReportDetail report = new ReportDetail(reportID, documentID, title, content);
            ReportDetailDAO reportDAO = new ReportDetailDAO(DatabaseConnection.getConnection());
            reportDAO.updateReport(report);

            populateReportTableWithSearch("");
            JOptionPane.showMessageDialog(this, "Report updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating report: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonUpdateReportActionPerformed

    private void txtSearchReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchReportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchReportActionPerformed

    private void btnSearchReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchReportActionPerformed
        // TODO add your handling code here:
        String keyword = txtSearchReport.getText().trim();
        populateReportTableWithSearch(keyword);
    }//GEN-LAST:event_btnSearchReportActionPerformed

    private void jButtonAddReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddReportActionPerformed
        // TODO add your handling code here:
        try {
        int documentID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter DocumentID:"));
        String title = JOptionPane.showInputDialog(this, "Enter Report Title:");
        String content = JOptionPane.showInputDialog(this, "Enter Report Content:");

        ReportDetail report = new ReportDetail(0, documentID, title, content);
        ReportDetailDAO reportDAO = new ReportDetailDAO(DatabaseConnection.getConnection());
        reportDAO.addReport(report);

        populateReportTableWithSearch("");
        JOptionPane.showMessageDialog(this, "Report added successfully!");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error adding report: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonAddReportActionPerformed

    private void jButtonDeleteReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteReportActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTableReports.getSelectedRow();
        if (selectedRow != -1) {
            int reportID = (int) jTableReports.getValueAt(selectedRow, 0);

            ReportDetailDAO reportDAO = new ReportDetailDAO(DatabaseConnection.getConnection());
            reportDAO.deleteReport(reportID);

            populateReportTableWithSearch("");
            JOptionPane.showMessageDialog(this, "Report deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting report: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonDeleteReportActionPerformed

    private void jButtonAddAdmissionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddAdmissionsActionPerformed
        // TODO add your handling code here:
        try {
        int patientID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Patient ID:"));
        int roomID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Room ID:"));
        String admissionDateStr = JOptionPane.showInputDialog(this, "Enter Admission Date (YYYY-MM-DD HH:mm:ss):");
        String dischargeDateStr = JOptionPane.showInputDialog(this, "Enter Discharge Date (YYYY-MM-DD HH:mm:ss or leave empty):");
        String notes = JOptionPane.showInputDialog(this, "Enter Notes:");
        int responsibleDoctorID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Responsible Doctor ID:"));
        int responsibleNurseID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Responsible Nurse ID:"));

        LocalDateTime admissionDate = LocalDateTime.parse(admissionDateStr.replace(" ", "T"));
        LocalDateTime dischargeDate = dischargeDateStr != null && !dischargeDateStr.trim().isEmpty() ? LocalDateTime.parse(dischargeDateStr.replace(" ", "T")) : null;

        Admission newAdmission = new Admission(0, patientID, roomID, admissionDate, dischargeDate, notes, responsibleDoctorID, responsibleNurseID);
        AdmissionDAO admissionDAO = new AdmissionDAO(DatabaseConnection.getConnection());
        admissionDAO.addAdmission(newAdmission);

        populateAdmissionTable();
        JOptionPane.showMessageDialog(this, "Admission added successfully!");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error adding admission: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonAddAdmissionsActionPerformed

    private void jButtonDeleteAdmissionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteAdmissionsActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTableAdmissions.getSelectedRow();
        if (selectedRow != -1) {
            int admissionID = (int) jTableAdmissions.getValueAt(selectedRow, 0);

            AdmissionDAO admissionDAO = new AdmissionDAO(DatabaseConnection.getConnection());
            admissionDAO.deleteAdmission(admissionID);

            populateAdmissionTable();
            JOptionPane.showMessageDialog(this, "Admission deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting admission: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonDeleteAdmissionsActionPerformed

    private void jButtonUpdateAdmissionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateAdmissionsActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTableAdmissions.getSelectedRow();
        if (selectedRow != -1) {
            int admissionID = (int) jTableAdmissions.getValueAt(selectedRow, 0);

            int patientID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Patient ID:", jTableAdmissions.getValueAt(selectedRow, 1)));
            int roomID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Room ID:", jTableAdmissions.getValueAt(selectedRow, 2)));
            String admissionDateStr = JOptionPane.showInputDialog(this, "Enter Admission Date (YYYY-MM-DD HH:mm:ss):", jTableAdmissions.getValueAt(selectedRow, 3));
            String dischargeDateStr = JOptionPane.showInputDialog(this, "Enter Discharge Date (YYYY-MM-DD HH:mm:ss or leave empty):", jTableAdmissions.getValueAt(selectedRow, 4));
            String notes = JOptionPane.showInputDialog(this, "Enter Notes:", jTableAdmissions.getValueAt(selectedRow, 5));
            int responsibleDoctorID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Responsible Doctor ID:", jTableAdmissions.getValueAt(selectedRow, 6)));
            int responsibleNurseID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Responsible Nurse ID:", jTableAdmissions.getValueAt(selectedRow, 7)));

            LocalDateTime admissionDate = LocalDateTime.parse(admissionDateStr.replace(" ", "T"));
            LocalDateTime dischargeDate = dischargeDateStr != null && !dischargeDateStr.trim().isEmpty() ? LocalDateTime.parse(dischargeDateStr.replace(" ", "T")) : null;

            Admission updatedAdmission = new Admission(admissionID, patientID, roomID, admissionDate, dischargeDate, notes, responsibleDoctorID, responsibleNurseID);
            AdmissionDAO admissionDAO = new AdmissionDAO(DatabaseConnection.getConnection());
            admissionDAO.updateAdmission(updatedAdmission);

            populateAdmissionTable();
            JOptionPane.showMessageDialog(this, "Admission updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating admission: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonUpdateAdmissionsActionPerformed

    private void txtSearchAdmissionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchAdmissionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchAdmissionsActionPerformed

    private void btnSearchAdmissionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchAdmissionsActionPerformed
        // TODO add your handling code here:
        String keyword = txtSearchAdmissions.getText();
        populateAdmissionsTableWithSearch(keyword);
        
    }//GEN-LAST:event_btnSearchAdmissionsActionPerformed

    private void jButtonTestAssignmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestAssignmentsActionPerformed
        // TODO add your handling code here:
         try {
        int selectedRow = jTableLabTestAssignments.getSelectedRow();
        if (selectedRow != -1) {
            int assignmentID = (int) jTableLabTestAssignments.getValueAt(selectedRow, 0);

            LabTestAssignmentDAO assignmentDAO = new LabTestAssignmentDAO(DatabaseConnection.getConnection());
            assignmentDAO.deleteAssignment(assignmentID);

            populateLabTestAssignmentTable();
            JOptionPane.showMessageDialog(this, "Lab Test Assignment deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting assignment: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonTestAssignmentsActionPerformed

    private void jButtonUpdateTestAssignmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateTestAssignmentsActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTableLabTestAssignments.getSelectedRow();
        if (selectedRow != -1) {
            int assignmentID = (int) jTableLabTestAssignments.getValueAt(selectedRow, 0);
            int testID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Test ID:", jTableLabTestAssignments.getValueAt(selectedRow, 1)));
            int technicianID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Technician ID:", jTableLabTestAssignments.getValueAt(selectedRow, 2)));
            LocalDateTime assignmentDate = LocalDateTime.parse(JOptionPane.showInputDialog(this, "Enter Assignment Date (YYYY-MM-DDTHH:MM):", jTableLabTestAssignments.getValueAt(selectedRow, 3)));

            LabTestAssignment updatedAssignment = new LabTestAssignment(assignmentID, testID, technicianID, assignmentDate);
            LabTestAssignmentDAO assignmentDAO = new LabTestAssignmentDAO(DatabaseConnection.getConnection());
            assignmentDAO.updateAssignment(updatedAssignment);

            populateLabTestAssignmentTable();
            JOptionPane.showMessageDialog(this, "Lab Test Assignment updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating assignment: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonUpdateTestAssignmentsActionPerformed

    private void jButtonAddTestAssignmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddTestAssignmentsActionPerformed
        // TODO add your handling code here:
        try {
        int testID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Test ID:"));
        int technicianID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Technician ID:"));
        LocalDateTime assignmentDate = LocalDateTime.now();

        LabTestAssignment assignment = new LabTestAssignment(0, testID, technicianID, assignmentDate);
        LabTestAssignmentDAO assignmentDAO = new LabTestAssignmentDAO(DatabaseConnection.getConnection());
        assignmentDAO.addAssignment(assignment);

        populateLabTestAssignmentTable();
        JOptionPane.showMessageDialog(this, "Lab Test Assignment added successfully!");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error adding assignment: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonAddTestAssignmentsActionPerformed

    private void txtSearchLabTestAssignmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchLabTestAssignmentsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchLabTestAssignmentsActionPerformed

    private void jButtonSearchTestAssignmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchTestAssignmentsActionPerformed
        // TODO add your handling code here:
        String keyword = txtSearchLabTestAssignments.getText();
        populateLabTestAssignmentsWithSearch(keyword);
    }//GEN-LAST:event_jButtonSearchTestAssignmentsActionPerformed

    private void jButtonDeleteMedicalRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteMedicalRecordsActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTableMedicalRecords.getSelectedRow();
        if (selectedRow != -1) {
            int recordID = (int) jTableMedicalRecords.getValueAt(selectedRow, 0);

            MedicalRecordDAO recordDAO = new MedicalRecordDAO(DatabaseConnection.getConnection());
            recordDAO.deleteRecord(recordID);

            populateMedicalRecordsTable();
            JOptionPane.showMessageDialog(this, "Medical record deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting medical record: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonDeleteMedicalRecordsActionPerformed

    private void jButtonUpdateMedicalRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateMedicalRecordsActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTableMedicalRecords.getSelectedRow();
        if (selectedRow != -1) {
            int recordID = (int) jTableMedicalRecords.getValueAt(selectedRow, 0);
            int patientID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Patient ID:", jTableMedicalRecords.getValueAt(selectedRow, 1)));
            int doctorID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Doctor ID:", jTableMedicalRecords.getValueAt(selectedRow, 2)));
            LocalDateTime recordDate = LocalDateTime.parse(JOptionPane.showInputDialog(this, "Enter Record Date (YYYY-MM-DDTHH:MM):", jTableMedicalRecords.getValueAt(selectedRow, 3)));
            String description = JOptionPane.showInputDialog(this, "Enter Description:", jTableMedicalRecords.getValueAt(selectedRow, 4));

            MedicalRecord updatedRecord = new MedicalRecord(recordID, patientID, doctorID, recordDate, description);
            MedicalRecordDAO recordDAO = new MedicalRecordDAO(DatabaseConnection.getConnection());
            recordDAO.updateRecord(updatedRecord);

            populateMedicalRecordsTable();
            JOptionPane.showMessageDialog(this, "Medical record updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating medical record: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonUpdateMedicalRecordsActionPerformed

    private void jButtonAddMedicalRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddMedicalRecordsActionPerformed
        // TODO add your handling code here:
        try {
        int patientID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Patient ID:"));
        int doctorID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Doctor ID:"));
        LocalDateTime recordDate = LocalDateTime.now();
        String description = JOptionPane.showInputDialog(this, "Enter Description:");

        MedicalRecord record = new MedicalRecord(0, patientID, doctorID, recordDate, description);
        MedicalRecordDAO recordDAO = new MedicalRecordDAO(DatabaseConnection.getConnection());
        recordDAO.addRecord(record);

        populateMedicalRecordsTable();
        JOptionPane.showMessageDialog(this, "Medical record added successfully!");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error adding medical record: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonAddMedicalRecordsActionPerformed

    private void txtSearchMedicalRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchMedicalRecordsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchMedicalRecordsActionPerformed

    private void jButtonSearchMedicalRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchMedicalRecordsActionPerformed
        // TODO add your handling code here:
        String keyword = txtSearchMedicalRecords.getText();
        populateMedicalRecordsWithSearch(keyword);
    }//GEN-LAST:event_jButtonSearchMedicalRecordsActionPerformed

    private void jButtonDeletePharmacyInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletePharmacyInventoryActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTablePharmacyInventory.getSelectedRow();
        if (selectedRow != -1) {
            int itemID = (int) jTablePharmacyInventory.getValueAt(selectedRow, 0);

            PharmacyInventoryDAO inventoryDAO = new PharmacyInventoryDAO(DatabaseConnection.getConnection());
            inventoryDAO.deleteItem(itemID);

            populatePharmacyInventoryTable();
            JOptionPane.showMessageDialog(this, "Pharmacy item deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting pharmacy item: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonDeletePharmacyInventoryActionPerformed

    private void jButtonUpdatePharmacyInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdatePharmacyInventoryActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTablePharmacyInventory.getSelectedRow();
        if (selectedRow != -1) {
            int itemID = (int) jTablePharmacyInventory.getValueAt(selectedRow, 0);
            String itemName = JOptionPane.showInputDialog(this, "Enter Item Name:", jTablePharmacyInventory.getValueAt(selectedRow, 1));
            int quantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Quantity:", jTablePharmacyInventory.getValueAt(selectedRow, 2)));
            double pricePerUnit = Double.parseDouble(JOptionPane.showInputDialog(this, "Enter Price Per Unit:", jTablePharmacyInventory.getValueAt(selectedRow, 3)));
            LocalDate expiryDate = LocalDate.parse(JOptionPane.showInputDialog(this, "Enter Expiry Date (YYYY-MM-DD):", jTablePharmacyInventory.getValueAt(selectedRow, 4)));
            String supplierName = JOptionPane.showInputDialog(this, "Enter Supplier Name:", jTablePharmacyInventory.getValueAt(selectedRow, 5));

            PharmacyItem updatedItem = new PharmacyItem(itemID, itemName, quantity, pricePerUnit, expiryDate, supplierName);
            PharmacyInventoryDAO inventoryDAO = new PharmacyInventoryDAO(DatabaseConnection.getConnection());
            inventoryDAO.updateItem(updatedItem);

            populatePharmacyInventoryTable();
            JOptionPane.showMessageDialog(this, "Pharmacy item updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating pharmacy item: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonUpdatePharmacyInventoryActionPerformed

    private void jButtonAddPharmacyInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPharmacyInventoryActionPerformed
        // TODO add your handling code here:
        try {
        String itemName = JOptionPane.showInputDialog(this, "Enter Item Name:");
        int quantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Quantity:"));
        double pricePerUnit = Double.parseDouble(JOptionPane.showInputDialog(this, "Enter Price Per Unit:"));
        LocalDate expiryDate = LocalDate.parse(JOptionPane.showInputDialog(this, "Enter Expiry Date (YYYY-MM-DD):"));
        String supplierName = JOptionPane.showInputDialog(this, "Enter Supplier Name:");

        PharmacyItem item = new PharmacyItem(0, itemName, quantity, pricePerUnit, expiryDate, supplierName);
        PharmacyInventoryDAO inventoryDAO = new PharmacyInventoryDAO(DatabaseConnection.getConnection());
        inventoryDAO.addItem(item);

        populatePharmacyInventoryTable();
        JOptionPane.showMessageDialog(this, "Pharmacy item added successfully!");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error adding pharmacy item: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonAddPharmacyInventoryActionPerformed

    private void txtSearchPharmacyInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchPharmacyInventoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchPharmacyInventoryActionPerformed

    private void jButtonSearchPharmacyInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchPharmacyInventoryActionPerformed
        // TODO add your handling code here:
        String keyword = txtSearchPharmacyInventory.getText();
        populatePharmacyItemsWithSearch(keyword);
    }//GEN-LAST:event_jButtonSearchPharmacyInventoryActionPerformed

    private void jButtonDeletePrescriptionDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletePrescriptionDetailsActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTablePrescriptionDetails.getSelectedRow();
        if (selectedRow != -1) {
            int prescriptionDetailID = (int) jTablePrescriptionDetails.getValueAt(selectedRow, 0);

            PrescriptionDetailsDAO detailsDAO = new PrescriptionDetailsDAO(DatabaseConnection.getConnection());
            detailsDAO.deletePrescriptionDetail(prescriptionDetailID);

            populatePrescriptionDetailsTable();
            JOptionPane.showMessageDialog(this, "Prescription detail deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting prescription detail: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonDeletePrescriptionDetailsActionPerformed

    private void jButtonUpdatePrescriptionDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdatePrescriptionDetailsActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTablePrescriptionDetails.getSelectedRow();
        if (selectedRow != -1) {
            int prescriptionDetailID = (int) jTablePrescriptionDetails.getValueAt(selectedRow, 0);
            int documentID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Document ID:", jTablePrescriptionDetails.getValueAt(selectedRow, 1)));
            int itemID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Item ID:", jTablePrescriptionDetails.getValueAt(selectedRow, 2)));
            int quantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Quantity:", jTablePrescriptionDetails.getValueAt(selectedRow, 3)));

            PrescriptionDetail updatedDetail = new PrescriptionDetail(prescriptionDetailID, documentID, itemID, quantity);
            PrescriptionDetailsDAO detailsDAO = new PrescriptionDetailsDAO(DatabaseConnection.getConnection());
            detailsDAO.updatePrescriptionDetail(updatedDetail);

            populatePrescriptionDetailsTable();
            JOptionPane.showMessageDialog(this, "Prescription detail updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating prescription detail: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonUpdatePrescriptionDetailsActionPerformed

    private void jButtonAddPrescriptionDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPrescriptionDetailsActionPerformed
        // TODO add your handling code here:
        try {
        int documentID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Document ID:"));
        int itemID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Item ID:"));
        int quantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Quantity:"));

        PrescriptionDetail detail = new PrescriptionDetail(0, documentID, itemID, quantity);
        PrescriptionDetailsDAO detailsDAO = new PrescriptionDetailsDAO(DatabaseConnection.getConnection());
        detailsDAO.addPrescriptionDetail(detail);

        populatePrescriptionDetailsTable();
        JOptionPane.showMessageDialog(this, "Prescription detail added successfully!");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error adding prescription detail: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonAddPrescriptionDetailsActionPerformed

    private void txtSearchPrescriptionDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchPrescriptionDetailsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchPrescriptionDetailsActionPerformed

    private void jButtonSearchPrescriptionDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchPrescriptionDetailsActionPerformed
        // TODO add your handling code here:
        String keyword = txtSearchPrescriptionDetails.getText();
        populatePrescriptionDetailsWithSearch(keyword);
    }//GEN-LAST:event_jButtonSearchPrescriptionDetailsActionPerformed

    private void jButtonDeletePrescriptionItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletePrescriptionItemsActionPerformed
        // TODO add your handling code here:
         try {
        int selectedRow = jTablePrescriptionItems.getSelectedRow();
        if (selectedRow != -1) {
            int prescriptionItemID = (int) jTablePrescriptionItems.getValueAt(selectedRow, 0);

            PrescriptionItemsDAO itemsDAO = new PrescriptionItemsDAO(DatabaseConnection.getConnection());
            itemsDAO.deletePrescriptionItem(prescriptionItemID);

            populatePrescriptionItemsTable();
            JOptionPane.showMessageDialog(this, "Prescription item deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting prescription item: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonDeletePrescriptionItemsActionPerformed

    private void jButtonUpdatePrescriptionItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdatePrescriptionItemsActionPerformed
        // TODO add your handling code here:
         try {
        int selectedRow = jTablePrescriptionItems.getSelectedRow();
        if (selectedRow != -1) {
            int prescriptionItemID = (int) jTablePrescriptionItems.getValueAt(selectedRow, 0);
            int prescriptionID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Prescription ID:", jTablePrescriptionItems.getValueAt(selectedRow, 1)));
            int itemID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Item ID:", jTablePrescriptionItems.getValueAt(selectedRow, 2)));
            int quantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Quantity:", jTablePrescriptionItems.getValueAt(selectedRow, 3)));

            PrescriptionItem updatedItem = new PrescriptionItem(prescriptionItemID, prescriptionID, itemID, quantity);
            PrescriptionItemsDAO itemsDAO = new PrescriptionItemsDAO(DatabaseConnection.getConnection());
            itemsDAO.updatePrescriptionItem(updatedItem);

            populatePrescriptionItemsTable();
            JOptionPane.showMessageDialog(this, "Prescription item updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating prescription item: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonUpdatePrescriptionItemsActionPerformed

    private void jButtonAddPrescriptionItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPrescriptionItemsActionPerformed
        // TODO add your handling code here:
        try {
        int prescriptionID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Prescription ID:"));
        int itemID = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Item ID:"));
        int quantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Quantity:"));

        PrescriptionItem item = new PrescriptionItem(0, prescriptionID, itemID, quantity);
        PrescriptionItemsDAO itemsDAO = new PrescriptionItemsDAO(DatabaseConnection.getConnection());
        itemsDAO.addPrescriptionItem(item);

        populatePrescriptionItemsTable();
        JOptionPane.showMessageDialog(this, "Prescription item added successfully!");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error adding prescription item: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonAddPrescriptionItemsActionPerformed

    private void txtSearchPrescriptionItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchPrescriptionItemsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchPrescriptionItemsActionPerformed

    private void jButtonSearchPrescriptionItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchPrescriptionItemsActionPerformed
        // TODO add your handling code here:
         String keyword = txtSearchPrescriptionItems.getText();
         populatePrescriptionItemsWithSearch(keyword);
        
    }//GEN-LAST:event_jButtonSearchPrescriptionItemsActionPerformed

    private void txtSearchUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchUsersActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchUsersActionPerformed

    private void jButtonSearchUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchUsersActionPerformed
        // TODO add your handling code here:
        String keyword = txtSearchUsers.getText();
        populateUsersWithSearch(keyword);
        
    }//GEN-LAST:event_jButtonSearchUsersActionPerformed

    private void jButtonDeleteUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteUsersActionPerformed
        // TODO add your handling code here:
        try {
        int selectedRow = jTableUsers.getSelectedRow();
        if (selectedRow != -1) {
            int userID = (int) jTableUsers.getValueAt(selectedRow, 0);

            UserDAO userDAO = new UserDAO(DatabaseConnection.getConnection());
            userDAO.deleteUser(userID);

            populateUsersTable();
            JOptionPane.showMessageDialog(this, "User deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting user: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonDeleteUsersActionPerformed

    private void jButtonUpdateUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateUsersActionPerformed
        // TODO add your handling code here:
         try {
        int selectedRow = jTableUsers.getSelectedRow();
        if (selectedRow != -1) {
            int userID = (int) jTableUsers.getValueAt(selectedRow, 0);
            String firstName = JOptionPane.showInputDialog(this, "Enter First Name:", jTableUsers.getValueAt(selectedRow, 1));
            String lastName = JOptionPane.showInputDialog(this, "Enter Last Name:", jTableUsers.getValueAt(selectedRow, 2));
            String email = JOptionPane.showInputDialog(this, "Enter Email:", jTableUsers.getValueAt(selectedRow, 3));
            String password = JOptionPane.showInputDialog(this, "Enter Password:", "******");
            String userType = JOptionPane.showInputDialog(this, "Enter User Type:", jTableUsers.getValueAt(selectedRow, 4));

            User updatedUser = new User(userID, firstName, lastName, email, password, userType, null);
            UserDAO userDAO = new UserDAO(DatabaseConnection.getConnection());
            userDAO.updateUser(updatedUser);

            populateUsersTable();
            JOptionPane.showMessageDialog(this, "User updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating user: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonUpdateUsersActionPerformed

    private void jButtonAddUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddUsersActionPerformed
        // TODO add your handling code here:
        try {
        String firstName = JOptionPane.showInputDialog(this, "Enter First Name:");
        String lastName = JOptionPane.showInputDialog(this, "Enter Last Name:");
        String email = JOptionPane.showInputDialog(this, "Enter Email:");
        String password = JOptionPane.showInputDialog(this, "Enter Password:");
        String userType = JOptionPane.showInputDialog(this, "Enter User Type (e.g., Patient, Doctor):");

        User user = new User(0, firstName, lastName, email, password, userType, null);
        UserDAO userDAO = new UserDAO(DatabaseConnection.getConnection());
        userDAO.addUser(user);

        populateUsersTable();
        JOptionPane.showMessageDialog(this, "User added successfully!");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error adding user: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonAddUsersActionPerformed

    private void jButtonCheckAvailabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckAvailabilityActionPerformed
        // TODO add your handling code here:
        try {
        int roomID = Integer.parseInt(txtRoomID.getText()); // RoomID textbox
        RoomDAO roomDAO = new RoomDAO(DatabaseConnection.getConnection());

        boolean isAvailable = roomDAO.isRoomAvailable(roomID);

        if (isAvailable) {
            JOptionPane.showMessageDialog(this, "Room is available.");
        } else {
            JOptionPane.showMessageDialog(this, "Room is not available.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
    }//GEN-LAST:event_jButtonCheckAvailabilityActionPerformed
    

    
 
    private void populateReportTable() {
    try {
        // Initialize the DAO
        ReportDetailDAO reportDAO = new ReportDetailDAO(DatabaseConnection.getConnection());
        
        // Fetch all reports
        List<ReportDetail> reports = reportDAO.getAllReports();

        // Define the table model with appropriate column headers
        DefaultTableModel model = new DefaultTableModel(
            new String[]{"ReportID", "DocumentID", "ReportTitle", "ReportContent"}, 0
        );

        // Add data to the table model
        for (ReportDetail report : reports) {
            model.addRow(new Object[]{
                report.getReportID(),
                report.getDocumentID(),
                report.getReportTitle(),
                report.getReportContent()
            });
        }

        // Set the table model to jTableReports
        jTableReports.setModel(model);

    } catch (SQLException e) {
        // Handle SQL exceptions
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading reports: " + e.getMessage());
    }
}

    private void populateInvoiceTableWithSearch(String keyword) {
    try {
        BillingDAO invoiceDAO = new BillingDAO(DatabaseConnection.getConnection());
        List<Billing> invoices;

        if (keyword == null || keyword.trim().isEmpty()) {
            // If no search keyword, load all invoices
            invoices = invoiceDAO.getAllInvoices();
        } else {
            // Perform search
            invoices = invoiceDAO.searchInvoices(keyword);
        }

        // Update table model
        DefaultTableModel model = new DefaultTableModel(
            new String[]{"BillID", "AppointmentID", "TotalAmount", "PaymentStatus", "IssueDate"}, 0
        );

        for (Billing invoice : invoices) {
            model.addRow(new Object[]{
                invoice.getBillID(),
                invoice.getAppointmentID(),
                invoice.getTotalAmount(),
                invoice.getPaymentStatus(),
                invoice.getIssueDate()
            });
        }

        jTableBillingManagement.setModel(model);

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
}
private void populateUsersWithSearch(String keyword) {
    try {
        UserDAO userDAO = new UserDAO(DatabaseConnection.getConnection());
        List<User> users = userDAO.searchUsers(keyword);

        DefaultTableModel model = new DefaultTableModel(
                new String[]{"UserID", "FirstName", "LastName", "Email", "UserType", "RegistrationDate"}, 0
        );

        for (User user : users) {
            model.addRow(new Object[]{
                    user.getUserID(),
                    user.getFirstName(),
                    user.getLastName(),
                    user.getEmail(),
                    user.getUserType(),
                    user.getRegistrationDate()
            });
        }

        jTableUsers.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error searching users: " + e.getMessage());
    }
}

    private void populateLabTestTableWithSearch(String keyword) {
    try {
        LabTestDAO labTestDAO = new LabTestDAO(DatabaseConnection.getConnection());
        List<LabTest> labTests;

        if (keyword == null || keyword.trim().isEmpty()) {
            // If no search keyword, load all lab tests
            labTests = labTestDAO.getAllLabTests();
        } else {
            // Perform search
            labTests = labTestDAO.searchLabTests(keyword);
        }

        // Update table model
        DefaultTableModel model = new DefaultTableModel(
            new String[]{"TestID", "PatientID", "TechnicianID", "TestName", "TestDate", "TestResult"}, 0
        );

        for (LabTest labTest : labTests) {
            model.addRow(new Object[]{
                labTest.getTestID(),
                labTest.getPatientID(),
                labTest.getTechnicianID(),
                labTest.getTestName(),
                labTest.getTestDate(),
                labTest.getTestResult()
            });
        }

        jTableLabTests.setModel(model);

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
}

    private void populateRoomTableWithSearch(String keyword) {
    try {
        RoomDAO roomDAO = new RoomDAO(DatabaseConnection.getConnection());
        List<Room> rooms = roomDAO.searchRooms(keyword);

        DefaultTableModel model = new DefaultTableModel(
                new String[]{"RoomID", "RoomType", "RoomNumber", "AvailabilityStatus"}, 0
        );

        for (Room room : rooms) {
            model.addRow(new Object[]{
                    room.getRoomID(),
                    room.getRoomType(),
                    room.getRoomNumber(),
                    room.getAvailabilityStatus()
            });
        }

        jTableRooms.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error searching rooms: " + e.getMessage());
    }
}

    private void populatePrescriptionTableWithSearch(String keyword) {
    try {
        PrescriptionDAO prescriptionDAO = new PrescriptionDAO(DatabaseConnection.getConnection());
        List<Prescription> prescriptions;

        if (keyword == null || keyword.trim().isEmpty()) {
            // If no search keyword, load all prescriptions
            prescriptions = prescriptionDAO.getAllPrescriptions();
        } else {
            // Perform search
            prescriptions = prescriptionDAO.searchPrescriptions(keyword);
        }

        // Update table model
        DefaultTableModel model = new DefaultTableModel(
            new String[]{"PrescriptionID", "PatientID", "DoctorID", "DateIssued", "Notes"}, 0
        );

        for (Prescription prescription : prescriptions) {
            model.addRow(new Object[]{
                prescription.getPrescriptionID(),
                prescription.getPatientID(),
                prescription.getDoctorID(),
                prescription.getDateIssued(),
                prescription.getNotes()
            });
        }

        jTablePrescriptions.setModel(model);

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
}
    
    private void populateReportTableWithSearch(String keyword) {
    try {
        ReportDetailDAO reportDAO = new ReportDetailDAO(DatabaseConnection.getConnection());
        List<ReportDetail> reports;

        if (keyword == null || keyword.trim().isEmpty()) {
            reports = reportDAO.getAllReports();
        } else {
            reports = reportDAO.searchReports(keyword);
        }

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"ReportID", "DocumentID", "ReportTitle", "ReportContent"}, 0
        );

        for (ReportDetail report : reports) {
            model.addRow(new Object[]{
                report.getReportID(),
                report.getDocumentID(),
                report.getReportTitle(),
                report.getReportContent()
            });
        }

        jTableReports.setModel(model);

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
       }
    }
    private void populateStaffTable() {
    try {
        StaffDAO staffDAO = new StaffDAO(DatabaseConnection.getConnection());
        List<Staff> staffList = staffDAO.getAllStaff();

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"StaffID", "FirstName", "LastName", "Role", "ContactNumber", "Email", "JoinDate"}, 0
        );

        for (Staff staff : staffList) {
            model.addRow(new Object[]{
                staff.getStaffID(),
                staff.getFirstName(),
                staff.getLastName(),
                staff.getRole(),
                staff.getContactNumber(),
                staff.getEmail(),
                staff.getJoinDate()
            });
        }

        jTableStaff.setModel(model);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error loading staff: " + e.getMessage());
    }
}
private void populatePrescriptionDetailsTable() {
    try {
        PrescriptionDetailsDAO detailsDAO = new PrescriptionDetailsDAO(DatabaseConnection.getConnection());
        List<PrescriptionDetail> details = detailsDAO.getAllPrescriptionDetails();

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"PrescriptionDetailID", "DocumentID", "ItemID", "Quantity"}, 0
        );

        for (PrescriptionDetail detail : details) {
            model.addRow(new Object[]{
                detail.getPrescriptionDetailID(),
                detail.getDocumentID(),
                detail.getItemID(),
                detail.getQuantity()
            });
        }

        jTablePrescriptionDetails.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading prescription details: " + e.getMessage());
    }
}

private void populateLabTestAssignmentsWithSearch(String keyword) {
    try {
        LabTestAssignmentDAO assignmentDAO = new LabTestAssignmentDAO(DatabaseConnection.getConnection());
        List<LabTestAssignment> assignments = assignmentDAO.searchAssignments(keyword);

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"AssignmentID", "TestID", "TechnicianID", "AssignmentDate"}, 0
        );

        for (LabTestAssignment assignment : assignments) {
            model.addRow(new Object[]{
                assignment.getAssignmentID(),
                assignment.getTestID(),
                assignment.getTechnicianID(),
                assignment.getAssignmentDate()
            });
        }

        jTableLabTestAssignments.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error searching assignments: " + e.getMessage());
    }
}

private void populateAdmissionsTableWithSearch(String keyword) {
    try {
        AdmissionDAO admissionDAO = new AdmissionDAO(DatabaseConnection.getConnection());
        List<Admission> admissions = admissionDAO.searchAdmissions(keyword);

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"AdmissionID", "PatientID", "RoomID", "AdmissionDate", "DischargeDate", "Notes", "ResponsibleDoctorID", "ResponsibleNurseID"}, 0
        );

        for (Admission admission : admissions) {
            model.addRow(new Object[]{
                admission.getAdmissionID(),
                admission.getPatientID(),
                admission.getRoomID(),
                admission.getAdmissionDate(),
                admission.getDischargeDate(),
                admission.getNotes(),
                admission.getResponsibleDoctorID(),
                admission.getResponsibleNurseID()
            });
        }

        jTableAdmissions.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error searching admissions: " + e.getMessage());
    }
}
private void populatePrescriptionItemsWithSearch(String keyword) {
    try {
        PrescriptionItemsDAO itemsDAO = new PrescriptionItemsDAO(DatabaseConnection.getConnection());
        List<PrescriptionItem> items = itemsDAO.searchPrescriptionItems(keyword);

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"PrescriptionItemID", "PrescriptionID", "ItemID", "Quantity"}, 0
        );

        for (PrescriptionItem item : items) {
            model.addRow(new Object[]{
                item.getPrescriptionItemID(),
                item.getPrescriptionID(),
                item.getItemID(),
                item.getQuantity()
            });
        }

        jTablePrescriptionItems.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error searching prescription items: " + e.getMessage());
    }
}

private void populateMedicalRecordsWithSearch(String keyword) {
    try {
        MedicalRecordDAO recordDAO = new MedicalRecordDAO(DatabaseConnection.getConnection());
        List<MedicalRecord> records = recordDAO.searchRecords(keyword);

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"RecordID", "PatientID", "DoctorID", "RecordDate", "Description"}, 0
        );

        for (MedicalRecord record : records) {
            model.addRow(new Object[]{
                record.getRecordID(),
                record.getPatientID(),
                record.getDoctorID(),
                record.getRecordDate(),
                record.getDescription()
            });
        }

        jTableMedicalRecords.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error searching medical records: " + e.getMessage());
    }
}

private void populateAppointmentTableWithSearch(String keyword) {
    try {
        AppointmentDAO appointmentDAO = new AppointmentDAO(DatabaseConnection.getConnection());
        List<Appointment> appointments = appointmentDAO.searchAppointments(keyword);

        DefaultTableModel model = new DefaultTableModel(
                new String[]{"AppointmentID", "PatientID", "DoctorID", "AppointmentDate", "Status", "Notes"}, 0
        );

        for (Appointment appointment : appointments) {
            model.addRow(new Object[]{
                    appointment.getAppointmentID(),
                    appointment.getPatientID(),
                    appointment.getDoctorID(),
                    appointment.getAppointmentDate(),
                    appointment.getStatus(),
                    appointment.getNotes()
            });
        }

        jTableAppointments.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error searching appointments: " + e.getMessage());
    }
}
private void populatePrescriptionDetailsWithSearch(String keyword) {
    try {
        PrescriptionDetailsDAO detailsDAO = new PrescriptionDetailsDAO(DatabaseConnection.getConnection());
        List<PrescriptionDetail> details = detailsDAO.searchPrescriptionDetails(keyword);

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"PrescriptionDetailID", "DocumentID", "ItemID", "Quantity"}, 0
        );

        for (PrescriptionDetail detail : details) {
            model.addRow(new Object[]{
                detail.getPrescriptionDetailID(),
                detail.getDocumentID(),
                detail.getItemID(),
                detail.getQuantity()
            });
        }

        jTablePrescriptionDetails.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error searching prescription details: " + e.getMessage());
    }
}

private void populatePharmacyItemsWithSearch(String keyword) {
    try {
        PharmacyInventoryDAO inventoryDAO = new PharmacyInventoryDAO(DatabaseConnection.getConnection());
        List<PharmacyItem> items = inventoryDAO.searchItems(keyword);

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"ItemID", "ItemName", "Quantity", "PricePerUnit", "ExpiryDate", "SupplierName"}, 0
        );

        for (PharmacyItem item : items) {
            model.addRow(new Object[]{
                item.getItemID(),
                item.getItemName(),
                item.getQuantity(),
                item.getPricePerUnit(),
                item.getExpiryDate(),
                item.getSupplierName()
            });
        }

        jTablePharmacyInventory.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error searching pharmacy inventory: " + e.getMessage());
    }
}

private void populateDoctorTableWithSearch(String keyword) {
    try {
        DoctorDAO doctorDAO = new DoctorDAO(DatabaseConnection.getConnection());
        List<Doctor> doctors = doctorDAO.searchDoctors(keyword);

        DefaultTableModel model = new DefaultTableModel(
                new String[]{"DoctorID", "UserID", "Specialization", "ContactNumber", "AvailabilityStatus", "JoinDate"}, 0
        );

        for (Doctor doctor : doctors) {
            model.addRow(new Object[]{
                    doctor.getDoctorID(),
                    doctor.getUserID(),
                    doctor.getSpecialization(),
                    doctor.getContactNumber(),
                    doctor.getAvailabilityStatus(),
                    doctor.getJoinDate()
            });
        }

        jTableDoctors.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error searching doctors: " + e.getMessage());
    }
}

private void populateStaffTableWithSearch(String keyword) {
    try {
        StaffDAO staffDAO = new StaffDAO(DatabaseConnection.getConnection());
        List<Staff> staffList;

        if (keyword == null || keyword.trim().isEmpty()) {
            // Load all staff if no keyword is provided
            staffList = staffDAO.getAllStaff();
        } else {
            // Perform search based on the keyword
            staffList = staffDAO.searchStaff(keyword);
        }

        // Update the table model
        DefaultTableModel model = new DefaultTableModel(
            new String[]{"StaffID", "FirstName", "LastName", "Role", "ContactNumber", "Email", "JoinDate"}, 0
        );

        for (Staff staff : staffList) {
            model.addRow(new Object[]{
                staff.getStaffID(),
                staff.getFirstName(),
                staff.getLastName(),
                staff.getRole(),
                staff.getContactNumber(),
                staff.getEmail(),
                staff.getJoinDate()
            });
        }

        jTableStaff.setModel(model);

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
}


    
    private void populatePatientTableWithSearch(String keyword) {
     try {
        PatientDAO patientDAO = new PatientDAO(DatabaseConnection.getConnection());
        List<Patient1> patients;

        if (keyword == null || keyword.trim().isEmpty()) {
            // Eğer arama anahtarı boşsa, tüm hastaları yükle
            patients = patientDAO.getAllPatients();
        } else {
            // Arama işlemini gerçekleştir
            patients = patientDAO.searchPatients(keyword);
        }

        // Tabloyu güncelle
        DefaultTableModel model = new DefaultTableModel(
            new String[]{"PatientID", "UserID", "DateOfBirth", "Gender", "ContactNumber", "Address", "RegistrationDate"}, 0
        );

        for (Patient1 patient : patients) {
            model.addRow(new Object[]{
                patient.getPatientID(),
                patient.getUserID(),
                patient.getDateOfBirth(),
                patient.getGender(),
                patient.getContactNumber(),
                patient.getAddress(),
                patient.getRegistrationDate()
            });
        }

        jTablePatients.setModel(model);

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
}

    private void populateDocumentAccessTable() {
    try {
        DocumentAccessDAO dao = new DocumentAccessDAO(DatabaseConnection.getConnection());
        List<DocumentAccess> accessList = dao.getAllAccess();

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"AccessID", "DocumentID", "UserID", "AccessLevel", "AccessDate"}, 0
        );

        for (DocumentAccess access : accessList) {
            model.addRow(new Object[]{
                access.getAccessID(),
                access.getDocumentID(),
                access.getUserID(),
                access.getAccessLevel(),
                access.getAccessDate()
            });
        }

        jTableDocumentAccess.setModel(model);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error loading document access data: " + e.getMessage());
        e.printStackTrace();
    }
}
    private void populateAdmissionTable() {
    try {
        AdmissionDAO admissionDAO = new AdmissionDAO(DatabaseConnection.getConnection());
        List<Admission> admissions = admissionDAO.getAllAdmissions();

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"AdmissionID", "PatientID", "RoomID", "AdmissionDate", "DischargeDate", "Notes", "ResponsibleDoctorID", "ResponsibleNurseID"}, 0
        );

        for (Admission admission : admissions) {
            model.addRow(new Object[]{
                admission.getAdmissionID(),
                admission.getPatientID(),
                admission.getRoomID(),
                admission.getAdmissionDate(),
                admission.getDischargeDate(),
                admission.getNotes(),
                admission.getResponsibleDoctorID(),
                admission.getResponsibleNurseID()
            });
        }

        jTableAdmissions.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading admissions: " + e.getMessage());
    }
}
    private void populatePrescriptionItemsTable() {
    try {
        PrescriptionItemsDAO itemsDAO = new PrescriptionItemsDAO(DatabaseConnection.getConnection());
        List<PrescriptionItem> items = itemsDAO.getAllPrescriptionItems();

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"PrescriptionItemID", "PrescriptionID", "ItemID", "Quantity"}, 0
        );

        for (PrescriptionItem item : items) {
            model.addRow(new Object[]{
                item.getPrescriptionItemID(),
                item.getPrescriptionID(),
                item.getItemID(),
                item.getQuantity()
            });
        }

        jTablePrescriptionItems.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading prescription items: " + e.getMessage());
    }
}



   private void populateAppointmentTable() {
    try {
        AppointmentDAO appointmentDAO = new AppointmentDAO(DatabaseConnection.getConnection());
        List<Appointment> appointments = appointmentDAO.getAllAppointments();

        DefaultTableModel model = new DefaultTableModel(
                new String[]{"AppointmentID", "PatientID", "DoctorID", "AppointmentDate", "Status", "Notes"}, 0
        );

        for (Appointment appointment : appointments) {
            model.addRow(new Object[]{
                    appointment.getAppointmentID(),
                    appointment.getPatientID(),
                    appointment.getDoctorID(),
                    appointment.getAppointmentDate(),
                    appointment.getStatus(),
                    appointment.getNotes()
            });
        }

        jTableAppointments.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading appointments: " + e.getMessage());
    }
}


   private void populateLabTestAssignmentTable() {
    try {
        LabTestAssignmentDAO assignmentDAO = new LabTestAssignmentDAO(DatabaseConnection.getConnection());
        List<LabTestAssignment> assignments = assignmentDAO.getAllAssignments();

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"AssignmentID", "TestID", "TechnicianID", "AssignmentDate"}, 0
        );

        for (LabTestAssignment assignment : assignments) {
            model.addRow(new Object[]{
                assignment.getAssignmentID(),
                assignment.getTestID(),
                assignment.getTechnicianID(),
                assignment.getAssignmentDate()
            });
        }

        jTableLabTestAssignments.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading assignments: " + e.getMessage());
    }
}

private void populateUsersTable() {
    try {
        UserDAO userDAO = new UserDAO(DatabaseConnection.getConnection());
        List<User> users = userDAO.getAllUsers();

        DefaultTableModel model = new DefaultTableModel(
                new String[]{"UserID", "FirstName", "LastName", "Email", "UserType", "RegistrationDate"}, 0
        );

        for (User user : users) {
            model.addRow(new Object[]{
                    user.getUserID(),
                    user.getFirstName(),
                    user.getLastName(),
                    user.getEmail(),
                    user.getUserType(),
                    user.getRegistrationDate()
            });
        }

        jTableUsers.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading users: " + e.getMessage());
    }
}

    
    private void populateBillingTable() {
    try {
         populateInvoiceTableWithSearch("");
        BillingDAO invoiceDAO = new BillingDAO(DatabaseConnection.getConnection());
        List<Billing> invoices = invoiceDAO.getAllInvoices();

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"BillID", "AppointmentID", "TotalAmount", "PaymentStatus", "IssueDate"}, 0
        );

        for (Billing invoice : invoices) {
            model.addRow(new Object[]{
                invoice.getBillID(),
                invoice.getAppointmentID(),
                invoice.getTotalAmount(),
                invoice.getPaymentStatus(),
                invoice.getIssueDate()
            });
        }

        jTableBillingManagement.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading invoices: " + e.getMessage());
    }
}

    
    private void populatePatientTable() {
    try {
        PatientDAO patientDAO = new PatientDAO(DatabaseConnection.getConnection());
        List<Patient1> patients = patientDAO.getAllPatients();

        
        DefaultTableModel model = new DefaultTableModel(
            new String[]{"PatientID", "UserID", "DateOfBirth", "Gender", "ContactNumber", "Address", "RegistrationDate"}, 0
        );

        for (Patient1 patient : patients) {
            model.addRow(new Object[]{
                patient.getPatientID(),
                patient.getUserID(),
                patient.getDateOfBirth(),
                patient.getGender(),
                patient.getContactNumber(),
                patient.getAddress(),
                patient.getRegistrationDate()
            });
        }

        jTablePatients.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading patients: " + e.getMessage());
    }
}

    
    private void populateLabTechniciansTable() {
    try {
        LabTechnicianDAO technicianDAO = new LabTechnicianDAO(DatabaseConnection.getConnection());
        List<LabTechnician> technicians = technicianDAO.getAllLabTechnicians();

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"TechnicianID", "FirstName", "LastName", "ContactNumber", "Email", "HireDate"}, 0
        );

        for (LabTechnician technician : technicians) {
            model.addRow(new Object[]{
                technician.getTechnicianID(),
                technician.getFirstName(),
                technician.getLastName(),
                technician.getContactNumber(),
                technician.getEmail(),
                technician.getHireDate()
            });
        }

        jTableLabTechnicians.setModel(model);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error loading lab technicians: " + e.getMessage());
        e.printStackTrace();
    }
}
private void populatePharmacyInventoryTable() {
    try {
        PharmacyInventoryDAO inventoryDAO = new PharmacyInventoryDAO(DatabaseConnection.getConnection());
        List<PharmacyItem> items = inventoryDAO.getAllItems();

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"ItemID", "ItemName", "Quantity", "PricePerUnit", "ExpiryDate", "SupplierName"}, 0
        );

        for (PharmacyItem item : items) {
            model.addRow(new Object[]{
                item.getItemID(),
                item.getItemName(),
                item.getQuantity(),
                item.getPricePerUnit(),
                item.getExpiryDate(),
                item.getSupplierName()
            });
        }

        jTablePharmacyInventory.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading pharmacy inventory: " + e.getMessage());
    }
}

private void populateLabTestTable() {
    try {
        populateLabTestTableWithSearch("");
        LabTestDAO labTestDAO = new LabTestDAO(DatabaseConnection.getConnection());
        List<LabTest> labTests = labTestDAO.getAllLabTests();

        DefaultTableModel model = (DefaultTableModel) jTableLabTests.getModel();
        model.setRowCount(0); 

        for (LabTest labTest : labTests) {
            model.addRow(new Object[]{
                labTest.getTestID(),
                labTest.getPatientID(),
                labTest.getTechnicianID(),
                labTest.getTestName(),
                labTest.getTestDate(),
                labTest.getTestResult()
            });
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading lab tests: " + e.getMessage());
    }
}
private void populateMedicalRecordsTable() {
    try {
        MedicalRecordDAO recordDAO = new MedicalRecordDAO(DatabaseConnection.getConnection());
        List<MedicalRecord> records = recordDAO.getAllRecords();

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"RecordID", "PatientID", "DoctorID", "RecordDate", "Description"}, 0
        );

        for (MedicalRecord record : records) {
            model.addRow(new Object[]{
                record.getRecordID(),
                record.getPatientID(),
                record.getDoctorID(),
                record.getRecordDate(),
                record.getDescription()
            });
        }

        jTableMedicalRecords.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading medical records: " + e.getMessage());
    }
}

private void populatePrescriptionTable() {
    try {
        populatePrescriptionTableWithSearch("");
        PrescriptionDAO prescriptionDAO = new PrescriptionDAO(DatabaseConnection.getConnection());
        List<Prescription> prescriptions = prescriptionDAO.getAllPrescriptions();

        DefaultTableModel model = new DefaultTableModel(
            new String[]{"PrescriptionID", "PatientID", "DoctorID", "DateIssued", "Notes"}, 0
        );

        for (Prescription prescription : prescriptions) {
            model.addRow(new Object[]{
                prescription.getPrescriptionID(),
                prescription.getPatientID(),
                prescription.getDoctorID(),
                prescription.getDateIssued(),
                prescription.getNotes()
            });
        }

        jTablePrescriptions.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading prescriptions: " + e.getMessage());
    }
}

private void populateDocumentsTable() {
    try {
        DocumentDAO documentDAO = new DocumentDAO(DatabaseConnection.getConnection());
        List<Document> documents = documentDAO.getAllDocuments();

        DefaultTableModel model = (DefaultTableModel) jTableDocuments.getModel();
        model.setRowCount(0); // Clear existing rows

        for (Document document : documents) {
            model.addRow(new Object[]{
                document.getDocumentID(),
                document.getDocumentType(),
                document.getRelatedID(),
                document.getCreatedBy(),
                document.getCreatedFor(),
                document.getCreationDate(),
                document.getStatus(),
                document.getDescription()
            });
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error loading documents: " + e.getMessage());
        e.printStackTrace();
    }
}
private void populateInvoiceTable() {
    try {
        InvoiceDAO invoiceDAO = new InvoiceDAO(DatabaseConnection.getConnection());
        List<InvoiceDetail> invoiceDetails = invoiceDAO.getAllInvoiceDetails();

        
        String[] columnNames = {"InvoiceDetailID", "DocumentID", "ItemDescription", "Quantity", "UnitPrice", "TotalPrice"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        
        for (InvoiceDetail detail : invoiceDetails) {
            model.addRow(new Object[]{
                detail.getInvoiceDetailID(),
                detail.getDocumentID(),
                detail.getItemDescription(),
                detail.getQuantity(),
                detail.getUnitPrice(),
                detail.getTotalPrice()
            });
        }

        // Set the updated model to the JTable
        jTableInvoiceDetails.setModel(model);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error loading invoice details: " + e.getMessage());
        e.printStackTrace();
    }
}
private void populateDoctorTable() {
    try {
        DoctorDAO doctorDAO = new DoctorDAO(DatabaseConnection.getConnection());
        List<Doctor> doctors = doctorDAO.getAllDoctors();

        DefaultTableModel model = new DefaultTableModel(
                new String[]{"DoctorID", "UserID", "Specialization", "ContactNumber", "AvailabilityStatus", "JoinDate"}, 0
        );

        for (Doctor doctor : doctors) {
            model.addRow(new Object[]{
                    doctor.getDoctorID(),
                    doctor.getUserID(),
                    doctor.getSpecialization(),
                    doctor.getContactNumber(),
                    doctor.getAvailabilityStatus(),
                    doctor.getJoinDate()
            });
        }

        jTableDoctors.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading doctors: " + e.getMessage());
    }
}




    
    private void populateRoomTable() {
    try {
        RoomDAO roomDAO = new RoomDAO(DatabaseConnection.getConnection());
        List<Room> rooms = roomDAO.getAllRooms();

        DefaultTableModel model = new DefaultTableModel(
                new String[]{"RoomID", "RoomType", "RoomNumber", "AvailabilityStatus"}, 0
        );

        for (Room room : rooms) {
            model.addRow(new Object[]{
                    room.getRoomID(),
                    room.getRoomType(),
                    room.getRoomNumber(),
                    room.getAvailabilityStatus()
            });
        }

        jTableRooms.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading rooms: " + e.getMessage());
    }
}


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPanel().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JButtonSearchPatient;
    private javax.swing.JButton btnSearchAdmissions;
    private javax.swing.JButton btnSearchAppoitment;
    private javax.swing.JButton btnSearchBillingManagement;
    private javax.swing.JButton btnSearchDoctor;
    private javax.swing.JButton btnSearchDocument;
    private javax.swing.JButton btnSearchDocumentAccessManagement;
    private javax.swing.JButton btnSearchInvoiceDetails;
    private javax.swing.JButton btnSearchLabTechnicians;
    private javax.swing.JButton btnSearchLabTest;
    private javax.swing.JButton btnSearchPrescription;
    private javax.swing.JButton btnSearchReport;
    private javax.swing.JButton btnSearchStaff;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButtonAddAdmissions;
    private javax.swing.JButton jButtonAddAppointment;
    private javax.swing.JButton jButtonAddBillingManagement;
    private javax.swing.JButton jButtonAddDoctor;
    private javax.swing.JButton jButtonAddDocument;
    private javax.swing.JButton jButtonAddDocumentAccessManagement;
    private javax.swing.JButton jButtonAddInvoiceDetails;
    private javax.swing.JButton jButtonAddLabResult;
    private javax.swing.JButton jButtonAddLabTechnicians;
    private javax.swing.JButton jButtonAddMedicalRecords;
    private javax.swing.JButton jButtonAddPatient;
    private javax.swing.JButton jButtonAddPharmacyInventory;
    private javax.swing.JButton jButtonAddPrescription;
    private javax.swing.JButton jButtonAddPrescriptionDetails;
    private javax.swing.JButton jButtonAddPrescriptionItems;
    private javax.swing.JButton jButtonAddReport;
    private javax.swing.JButton jButtonAddRoom;
    private javax.swing.JButton jButtonAddStaff;
    private javax.swing.JButton jButtonAddTestAssignments;
    private javax.swing.JButton jButtonAddUsers;
    private javax.swing.JButton jButtonCheckAvailability;
    private javax.swing.JButton jButtonDeleteAdmissions;
    private javax.swing.JButton jButtonDeleteAppoitment;
    private javax.swing.JButton jButtonDeleteBillingManagement;
    private javax.swing.JButton jButtonDeleteDoctor;
    private javax.swing.JButton jButtonDeleteDocument;
    private javax.swing.JButton jButtonDeleteDocumentAccessManagement;
    private javax.swing.JButton jButtonDeleteInvoiceDetails;
    private javax.swing.JButton jButtonDeleteLabResult;
    private javax.swing.JButton jButtonDeleteMedicalRecords;
    private javax.swing.JButton jButtonDeletePatient;
    private javax.swing.JButton jButtonDeletePharmacyInventory;
    private javax.swing.JButton jButtonDeletePrescription;
    private javax.swing.JButton jButtonDeletePrescriptionDetails;
    private javax.swing.JButton jButtonDeletePrescriptionItems;
    private javax.swing.JButton jButtonDeleteReport;
    private javax.swing.JButton jButtonDeleteRoom;
    private javax.swing.JButton jButtonDeleteStaff;
    private javax.swing.JButton jButtonDeleteUsers;
    private javax.swing.JButton jButtonLabTechnicians;
    private javax.swing.JButton jButtonSearchMedicalRecords;
    private javax.swing.JButton jButtonSearchPharmacyInventory;
    private javax.swing.JButton jButtonSearchPrescriptionDetails;
    private javax.swing.JButton jButtonSearchPrescriptionItems;
    private javax.swing.JButton jButtonSearchRoom;
    private javax.swing.JButton jButtonSearchTestAssignments;
    private javax.swing.JButton jButtonSearchUsers;
    private javax.swing.JButton jButtonTestAssignments;
    private javax.swing.JButton jButtonUpdateAdmissions;
    private javax.swing.JButton jButtonUpdateAppoitment;
    private javax.swing.JButton jButtonUpdateBillingManagement;
    private javax.swing.JButton jButtonUpdateDoctor;
    private javax.swing.JButton jButtonUpdateDocument;
    private javax.swing.JButton jButtonUpdateDocumentAccessManagement;
    private javax.swing.JButton jButtonUpdateInvoiceDetails;
    private javax.swing.JButton jButtonUpdateLabTechnicians;
    private javax.swing.JButton jButtonUpdateMedicalRecords;
    private javax.swing.JButton jButtonUpdatePatient;
    private javax.swing.JButton jButtonUpdatePharmacyInventory;
    private javax.swing.JButton jButtonUpdatePrescription;
    private javax.swing.JButton jButtonUpdatePrescriptionDetails;
    private javax.swing.JButton jButtonUpdatePrescriptionItems;
    private javax.swing.JButton jButtonUpdateReport;
    private javax.swing.JButton jButtonUpdateRoom;
    private javax.swing.JButton jButtonUpdateStaff;
    private javax.swing.JButton jButtonUpdateTestAssignments;
    private javax.swing.JButton jButtonUpdateUsers;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane27;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable13;
    private javax.swing.JTable jTable9;
    private javax.swing.JTable jTableAdmissions;
    private javax.swing.JTable jTableAppointments;
    private javax.swing.JTable jTableBillingManagement;
    private javax.swing.JTable jTableDoctors;
    private javax.swing.JTable jTableDocumentAccess;
    private javax.swing.JTable jTableDocuments;
    private javax.swing.JTable jTableInvoiceDetails;
    private javax.swing.JTable jTableLabTechnicians;
    private javax.swing.JTable jTableLabTestAssignments;
    private javax.swing.JTable jTableLabTests;
    private javax.swing.JTable jTableMedicalRecords;
    private javax.swing.JTable jTablePatients;
    private javax.swing.JTable jTablePharmacyInventory;
    private javax.swing.JTable jTablePrescriptionDetails;
    private javax.swing.JTable jTablePrescriptionItems;
    private javax.swing.JTable jTablePrescriptions;
    private javax.swing.JTable jTableReports;
    private javax.swing.JTable jTableRooms;
    private javax.swing.JTable jTableStaff;
    private javax.swing.JTable jTableUsers;
    private javax.swing.JTextField txtRoomID;
    private javax.swing.JTextField txtSearchAdmissions;
    private javax.swing.JTextField txtSearchAppointments;
    private javax.swing.JTextField txtSearchBillingManagement;
    private javax.swing.JTextField txtSearchDoctors;
    private javax.swing.JTextField txtSearchDocument;
    private javax.swing.JTextField txtSearchDocumentAccess;
    private javax.swing.JTextField txtSearchInvoiceDetails;
    private javax.swing.JTextField txtSearchLabTechnicians;
    private javax.swing.JTextField txtSearchLabTest;
    private javax.swing.JTextField txtSearchLabTestAssignments;
    private javax.swing.JTextField txtSearchMedicalRecords;
    private javax.swing.JTextField txtSearchPatient;
    private javax.swing.JTextField txtSearchPharmacyInventory;
    private javax.swing.JTextField txtSearchPrescription;
    private javax.swing.JTextField txtSearchPrescriptionDetails;
    private javax.swing.JTextField txtSearchPrescriptionItems;
    private javax.swing.JTextField txtSearchReport;
    private javax.swing.JTextField txtSearchRooms;
    private javax.swing.JTextField txtSearchStaff;
    private javax.swing.JTextField txtSearchUsers;
    // End of variables declaration//GEN-END:variables
}
